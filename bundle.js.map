{"version":3,"sources":["../../../../usr/local/lib/node_modules/browserify/node_modules/browser-pack/_prelude.js","static/js/react_components.js"],"names":["strSubstitute","str","substitutions","replace","all","getURLPathArgByPosition","position","pathArray","window","location","pathname","split","getUserFromPropsOrURL","props","userID","getURLParameterByName","name","regex","RegExp","results","exec","search","decodeURIComponent","getElementValueOrNull","elementID","document","getElementById","value","showDateUTCToLocal","stringDate","moment","utc","toDate","showDateUTCToLocalFormat","format","getSpanFormat","spanDate","addDismissibleModal","displayName","message","$","length","modalHTML","after","text","modal","limitFileSize","event","input","file","files","size","parent","addClass","preventDefault","validateChannelName","field","re","test","removeClass","validateTextField","allowSpaces","customMessage","validateYoutubeField","validateDropDown","PageLink","i","char","current","character","String","React","createElement","key","href","className","componentToHex","c","hex","toString","rgbToHex","r","g","b","hexToRgb","result","parseInt","HEAT_MAP_COLORS","SetIntervalMixin","componentWillMount","this","intervals","setInterval","push","apply","arguments","componentWillUnmount","forEach","clearInterval","Slider","createClass","getDefaultProps","redVal","greenVal","blueVal","updateVal","onUserInput","refs","render","redSliderInput","greenSliderInput","blueSliderInput","hexValue","enabled","id","ref","type","min","max","onChange","disabled","htmlFor","inputName","IntervalTimer","componentDidMount","counterStyle","clock","timerID","FlipClock","secondsRemaining","clockFace","countdown","setTimeout","decrement","ColorBar","style","backgroundColor","ColorPicker","getInitialState","rgb","hexColor","redValue","greenValue","blueValue","handleUserInput","redValueFromDOM","greenValueFromDOM","blueValueFromDOM","setState","state","StarImage","src","CSRFProtect","divStyle","display","csrfToken","ModalConfirm","handleClick","formID","submit","actionLink","action","submitID","onClick","modalID","role","header","data-dismiss","dismiss","Pagination","pages","maxPages","currentPage","links","pageList","map","x","Label","labelClasses","labelColor","extraClasses","labelContents","Form","formClass","formStyle","formSubmitUrl","method","encType","onSubmit","onFormSubmit","formContents","FormGroup","helpBlock","docs","labelSize","inputSize","starImage","target","premium","inputValidLabel","FormLabel","colSize","error","Panel","panelAnimate","panelWidth","panelOffset","colClasses","panelClasses","panelColor","panelComponents","panelHeadingContent","PanelHeader","panelHeadingClasses","panelHeadingStyle","panelHeadingLink","bodyContent","PanelBody","panelBodyClasses","footerContent","PanelFooter","panelFooterClasses","link","panelHeaderClasses","Badge","badgeClasses","badgeStyle","badgeColor","color","content","Medal","data","medalUrl","medalListAPIUrl","medalID","ajax","url","dataType","success","bind","xhr","status","err","console","medalURL","medalsUrl","medalClasses","icon_filename","Loading","loadingBarColor","PlayerImage","undefined","playerUrl","playerAPIUrl","playerID","playerName","playerNameClasses","showName","photo_url","Image","image_url","BigButton","buttonClass","buttonColor","buttonLink","buttonText","BigButtonDropdownContents","shows","spans","showAPIUrl","showData","leaderboardContext","leaderboardSpanAPIUrl","spanData","dropDownStyle","width","textAlign","dropDownList","counter","allClass","showID","spanID","baseLinkUrl","span","startDate","start_date","endDate","end_date","spanUrl","show","showClass","showLink","showDateFormatted","created","BigButtonDropdown","buttonGroupStyle","currentSelection","data-toggle","aria-expanded","DropDownSelect","listAPIUrl","componentDidUpdate","prev","next","multiple","ReactDOM","findDOMNode","multiSelect","selectID","optionList","defaultText","item","convertCreatedTimestamp","selectEventHandler","defaultValue","defaultSelected","BottomNavSelect","itemLink","selectedID","display_name","label","ChannelCreateEditForm","email","short_description","description","website","facebook_page","buy_tickets_link","next_show","navbar_color","background_color","address","street","city","zipcode","channelCreateEditContext","channelID","channelAPIUrl","datetimepicker","validateName","valid","channelNameAPIUrl","validName","nameTaken","actionText","nameValidLabel","nameInput","onKeyDown","autoComplete","aria-hidden","displayNameInput","contactEmail","emailInput","maxLength","rows","shortDescriptionInput","DescriptionInput","team_photo_url","teamPhotoInput","websiteInput","facebookPageInput","buyTicketsInput","nextShowInput","navbarColorInput","isPremium","backgroundColorInput","streetInput","cityInput","stateInput","zipcodeInput","submitButton","deleteContents","data-target","active","star","editPlayerID","addPlayerContext","playerNameInput","playerPhotoInput","defaultChecked","activeInput","starInput","playerListAPIUrl","handleEditPlayer","max_user_suggestions","admin_only","require_login","suggestionPoolID","suggestionPoolAPIUrl","suggestionPoolContext","requireLoginInput","suggestionPoolListAPIUrl","editEventHandler","suggestionPoolEditInput","suggestion_pool","preshow_selected","manual_interval_control","ordering","options","vote_length","result_length","button_color","voteTypeID","voteTypeAPIUrl","voteTypeContext","voteStyleAPIUrl","manualIntervalControlInput","orderingInput","optionsInput","voteLengthInput","resultLengthInput","buttonColorInput","voteTypeListAPIUrl","voteTypeEditInput","show_length","embedded_youtube","channelShowContext","voteTypesInput","playersInput","showLengthInput","photoLinkInput","photo_link","youtubeInput","showListAPIUrl","showEditInput","channelLeaderboardSpanContext","spanEditInput","MedalButtonForm","awardMedalInput","medalActionLink","ChannelLeaderboardTable","channelLeaderboardAPIUrl","colSpan","tableList","startCount","maxPerPage","page","leaderboardUser","usersUrl","user_id","channelName","rank","userUrl","username","suggestion_wins","points","show_wins","SpanLeaderboardTable","leaderboardEntrySpanAPIUrl","ShowLeaderboardTable","leaderboardEntryAPIUrl","medalList","medals","suggestions","wins","Leaderboard","start","channelLeaderboardUrl","leaderboardComponents","channelShowRecapUrl","medalsAwarded","MedalRows","rowList","userAccountContext","currentNum","UserStatsTableBody","userStatsAPIUrl","medalShare","columnColor","tdClasses","trClasses","statsList","userProfileID","requestUserID","UserShowStats","showStatsUrl","showStats","heading","UserShowStatsPanelBody","tableClasses","statElements","channel_name","recapLink","UserShowStatsTableBody","userSuggestionsUrl","suggestionListAPIUrl","suggestionList","suggestionClass","suggestionDisplay","suggestion","used","voted_on","UserStats","leaderboardStatsAPIUrl","showList","usernameTab","aria-controls","usernameForm","usernameTabContents","ShowMedia","videoPanel","channelFacebookPage","photoBodyContent","videoBodyContent","photoPanel","ShowRecapPanels","recapContext","showRecapAPIUrl","panelList","recapItem","player","players_only","winningOption","voteOptionCounter","voteOption","winning_option","voteOptionID","voteOptionAPIUrl","recap","winner","vote_type","Recap","recapComponents","channelRecapsUrl","channelShowLeaderboardUrl","ShowSuggestionPoolSuggestion","preshow_value","votesID","buttonID","session_id","sessionID","upvoteButton","user_already_upvoted","upvoteSpans","handleUpvote","suggestionKey","deleteSubmitUrl","deleteButton","ShowSuggestionPoolAdd","maximum","suggestalot","showSuggestionPoolContext","suggestionPoolDisplayName","suggestionInput","markdown","toHTML","suggestionPoolDescription","suggestingDisabled","readOnly","dangerouslySetInnerHTML","__html","ShowSuggestionPool","pullInitialSuggestions","updateSuggestions","NewSuggestionIDIndex","suggestionIDIndex","suggestionIndex","orderedSuggestions","suggestionID","prop","upvotes","upvoteData","csrfmiddlewaretoken","upvoteSubmitUrl","log","responseText","votePanelList","voteHeading","isChannelAdmin","baseSuggestionPoolUrl","ShowControllerVoteType","updateVoteType","voteTypeButton","intervalTimer","buttonStyle","optionType","availableText","available_options","interval_seconds_remaining","remaining_intervals","show_player_pool","vote_type_player_pool","current_interval","vote_options_name","availableOptions","vote_type_used","voteTypeForm","voteTypePanelContents","ShowController","updateShowController","showControllerContext","showLocked","lockForm","lockHelpText","showRemaining","voteTypePanelList","running","locked","lockedText","show_seconds_remaining","VoteOptionPlayer","voteOptionUrl","voteDelta","live_votes","sounds","volume","preload","ion","sound","play","nextState","loadPlayerOptionData","deltaSpan","scale","chroma","domain","min_votes","max_votes","liveVotesColor","player_photo","player_name","option_number","headingStyle","VoteOptionSuggestion","loadSuggestionOptionData","optionButtonClasses","vote_options_count","out","submittedBy","suggestion_value","RemainingIntervalsButton","voteTypeUrl","ShowDefaultDisplay","showLeaderboardAPIUrl","teamPhoto","leKey","remainingVoteTypes","leaderboardEntries","vote_types","leaderboardEntry","teamPhotoUrl","showLeaderboardUrl","showLeaderboard","ShowResultDisplayVotedOption","submittedByText","submittedByButton","voteTypeResult","voteTypeData","liveVotesClasses","buttonClasses","ShowResultDisplay","current_vote_type","voted_option","current_player","audioPath","ShowVotingDisplay","votingDisplay","vote_seconds_remaining","rowKey","playersPerRow","vote_options","playerOptionList","voteTypeHeading","player_options","playerKey","ShowDisplay","showDisplayContext","loadShowData","showStateDisplay","RootComponent","rootType","imageBaseUrl","contentType","end","isAdmin","rootComponents","PlayerForm","SuggestionPoolForm","VoteTypeForm","ChannelShowForm","ChannelLeaderboardSpanForm","channelHomeUrl","suggestionAPIUrl","liveVoteAPIUrl"],"mappings":"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","file":"bundle.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","///////////////////////////////////////////////////////////////////////////////////////////\n//////////////////////////////////// UTILITY FUNCTIONS/////////////////////////////////////\n///////////////////////////////////////////////////////////////////////////////////////////\n\nvar HEAT_MAP_COLORS = ['#53B6D4', '#FF3333'];\n\nfunction strSubstitute(str, substitutions) {\n    return str.replace(/%\\w+%/g, function(all) {\n       return substitutions[all] || all;\n    });\n}\n\nfunction getURLPathArgByPosition(position) {\n    // Default to getting the userID from the url\n    var pathArray = window.location.pathname.split( '/' );\n    return pathArray[position];\n}\n\nfunction getUserFromPropsOrURL(props, position){\n    // Get the user id, default from url path\n    var userID;\n    if (props.userID) {\n        userID = props.userID;\n    } else {\n        userID = getURLPathArgByPosition(position);\n    }\n    return userID;\n}\n\nfunction getURLParameterByName(name) {\n    name = name.replace(/[\\[]/, \"\\\\[\").replace(/[\\]]/, \"\\\\]\");\n    var regex = new RegExp(\"[\\\\?&]\" + name + \"=([^&#]*)\"),\n        results = regex.exec(location.search);\n    return results === null ? \"\" : decodeURIComponent(results[1].replace(/\\+/g, \" \"));\n}\n\nfunction getElementValueOrNull(elementID){\n    if (document.getElementById(elementID) != null) {\n        return document.getElementById(elementID).value;\n    }\n    else {\n        return null;\n    }\n}\n\nfunction showDateUTCToLocal(stringDate) {\n    return moment(moment.utc(stringDate).toDate());\n}\n\nfunction showDateUTCToLocalFormat(stringDate) {\n    return showDateUTCToLocal(stringDate).format(\"ddd. MMM. Do, YYYY @hA\");\n}\n\nfunction getSpanFormat(spanDate){\n    return spanDate.replace(/-/g, '');\n}\n\nfunction addDismissibleModal(elementID, displayName, message) {\n    // If the form modal doesn't exist, create it\n    if (!$('#form-modal').length) {\n        // Create the modal html string\n        var modalHTML = '<div class=\"modal fade\" id=\"form-modal\" tabindex=\"-1\" role=\"dialog\">' +\n                            '<div class=\"modal-dialog\">' +\n                                '<div class=\"modal-content\">' +\n                                    '<div class=\"modal-header\">' +\n                                        '<button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-label=\"Close\"><span aria-hidden=\"true\">&times;</span></button>' +\n                                        '<h4 id=\"form-modal-title\" class=\"modal-title\"></h4>' +\n                                    '</div>' +\n                                    '<div class=\"modal-body\">' +\n                                        '<p id=\"form-modal-message\"></p>' +\n                                    '</div>' +\n                                    '<div class=\"modal-footer\">' +\n                                        '<button type=\"button\" class=\"btn btn-default\" data-dismiss=\"modal\">Close</button>' +\n                                    '</div>' +\n                                '</div>' +\n                            '</div>' +\n                        '</div>';\n        // Add the html after the element\n        $('#'+elementID).after(modalHTML);\n    }\n    // Changes the modal title\n    $('#form-modal-title').text(displayName + \" Invalid\");\n    // Changes the modal message\n    $('#form-modal-message').text(message);\n    // Shows the modal\n    $('#form-modal').modal('show');\n}\n\nfunction limitFileSize(event, elementID, displayName) {\n    var input = document.getElementById(elementID);\n      // Examine the input file\n    if (input) {\n        var file = input.files[0];\n        // Make sure the file is less than 2 MB\n        if (file && file.size > 2097152) {\n            $('#'+elementID).parent('span').addClass('btn-danger');\n            // Show a dismissible modal\n            addDismissibleModal(elementID, displayName, \"Image file sizes must be smaller than 2MB\");\n            event.preventDefault();\n        }\n    }\n}\n\nfunction validateChannelName() {\n    var field = document.getElementById(\"name\");\n    // Names should only be lower case or have dashes\n    var re = /^[a-z0-9-]+$/;\n\n    // If the name is invalid\n    if (!re.test(field.value) || field.value.length === 0) {\n        $('#name').parent('div').addClass('has-error');\n        return false;\n    } else {\n        $('#name').parent('div').removeClass('has-error');\n        return true;\n    }\n}\n\nfunction validateTextField(event, elementID, displayName, allowSpaces, customMessage) {\n    var field = document.getElementById(elementID);\n    var re;\n    if (allowSpaces) {\n        re = /^[\\w- ]+$/;\n    } else {\n        re = /^[\\w-]+$/;\n    }\n    // If the field is invalid\n    if (!re.test(field.value) || field.value.length === 0) {\n        var message;\n        $('#'+elementID).parent('div').addClass('has-error');\n        if (customMessage) {\n            message = customMessage;\n        } else {\n            message = displayName + ' must be a combination of letters, numbers, hyphens, or underscores.';\n        }\n        // Show a dismissible modal\n        addDismissibleModal(elementID, displayName, message);\n        event.preventDefault();\n    }\n}\n\nfunction validateYoutubeField(event, elementID, displayName) {\n    var field = document.getElementById(elementID);\n    var re = /^.*((youtu.be\\/)|(v\\/)|(\\/u\\/\\w\\/)|(embed\\/)|(watch\\?))\\??v?=?([^#\\&\\?]*).*/;\n    if (field.value.length !== 0 && !re.test(field.value)) {\n        $('#'+elementID).parent('div').addClass('has-error');\n        // Show a dismissible modal\n        addDismissibleModal(elementID, displayName, displayName + ' must be a valid Youtube link.');\n        event.preventDefault();\n    }\n}\n\nfunction validateDropDown(event, elementID, displayName) {\n    var field = document.getElementById(elementID);\n    // Make sure a value has been selected\n    if (field && field.value === \"\") {\n        $('#'+elementID).parent('div').addClass('has-error');\n        // Show a dismissible modal\n        addDismissibleModal(elementID, displayName, displayName + ' is required.');\n        event.preventDefault();\n    }\n}\n\nfunction PageLink(i, char, current){\n  var character = character || String(i);\n  if (i !== current) {\n      return (\n        <li key={char}>\n          <a href={\"?page=\"+i}>{char}</a>\n        </li>\n      );\n  } else {\n      return (\n        <li key={char} className=\"disabled\"><a href=\"#\">{char}</a></li>\n      );\n  }\n}\n\nfunction componentToHex(c) {\n    var hex = c.toString(16);\n    return hex.length == 1 ? \"0\" + hex : hex;\n}\n\nfunction rgbToHex(r, g, b) {\n    return \"#\" + componentToHex(r) + componentToHex(g) + componentToHex(b);\n}\n\nfunction hexToRgb(hex) {\n    var result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n    return result ? {\n        r: parseInt(result[1], 16),\n        g: parseInt(result[2], 16),\n        b: parseInt(result[3], 16)\n    } : null;\n}\n\n///////////////////////////////////////////////////////////////////////////////////////////\n///////////////////////////////////// BASE COMPONENTS /////////////////////////////////////\n///////////////////////////////////////////////////////////////////////////////////////////\n\nvar SetIntervalMixin = {\n  componentWillMount: function() {\n    this.intervals = [];\n  },\n  setInterval: function() {\n    this.intervals.push(setInterval.apply(null, arguments));\n  },\n  componentWillUnmount: function() {\n    this.intervals.forEach(clearInterval);\n  }\n};\n\n\nvar Slider = React.createClass({\n  getDefaultProps: function() {\n    return {\n      redVal: \"\",\n      greenVal: \"\",\n      blueVal: \"\"\n    }\n  },\n  updateVal: function() {\n    this.props.onUserInput(\n      this.refs.redVal.value,\n      this.refs.greenVal.value,\n      this.refs.blueVal.value\n    )\n  },\n  render: function() {\n    var redSliderInput, greenSliderInput, blueSliderInput;\n    var hexValue = rgbToHex(parseInt(this.props.redVal),\n                            parseInt(this.props.greenVal),\n                            parseInt(this.props.blueVal));\n    if (this.props.enabled === \"True\") {\n        redSliderInput = <input className=\"col-xs-8\" id=\"redSlider\" ref=\"redVal\" type=\"range\" min=\"0\" max=\"255\" value={this.props.redVal} onChange={this.updateVal} />;\n        greenSliderInput = <input className=\"col-xs-8\" id=\"greenSlider\" ref=\"greenVal\" type=\"range\" min=\"0\" max=\"255\" value={this.props.greenVal} onChange={this.updateVal} />;\n        blueSliderInput = <input className=\"col-xs-8\" id=\"blueSlider\" ref=\"blueVal\" type=\"range\" min=\"0\" max=\"255\" value={this.props.blueVal} onChange={this.updateVal} />;\n    } else {\n        redSliderInput = <input className=\"col-xs-8\" id=\"redSlider\" disabled=\"true\" ref=\"redVal\" type=\"range\" min=\"0\" max=\"255\" value={this.props.redVal} onChange={this.updateVal} />;\n        greenSliderInput = <input className=\"col-xs-8\" id=\"greenSlider\" disabled=\"true\" ref=\"greenVal\" type=\"range\" min=\"0\" max=\"255\" value={this.props.greenVal} onChange={this.updateVal} />;\n        blueSliderInput = <input className=\"col-xs-8\" id=\"blueSlider\" disabled=\"true\" ref=\"blueVal\" type=\"range\" min=\"0\" max=\"255\" value={this.props.blueVal} onChange={this.updateVal} />;\n    }\n    return (\n      <div>\n        <div className=\"form-group row\">\n          <label className=\"col-xs-4\" htmlFor=\"redSlider\">R - {this.props.redVal}</label>\n          {redSliderInput}\n        </div>\n        <div className=\"form-group row\">\n          <label className=\"col-xs-4\" htmlFor=\"greenSlider\">G - {this.props.greenVal}</label>\n          {greenSliderInput}\n        </div>\n        <div className=\"form-group row\">\n          <label className=\"col-xs-4\" htmlFor=\"blueSlider\">B - {this.props.blueVal}</label>\n          {blueSliderInput}\n        </div>\n        <input type=\"hidden\" name={this.props.inputName} value={hexValue}></input>\n      </div>\n    )\n  }\n});\n\n\nvar IntervalTimer = React.createClass({\n  componentDidMount: function() {\n      // Counter style examples: \"MinuteCounter\", \"HourCounter\"\n      if (this.props.counterStyle) {\n          var clock = $('#' + this.props.timerID).FlipClock(\n              this.props.secondsRemaining, {\n                  clockFace: this.props.counterStyle,\n                  countdown: true\n          });\n      // Just a regular old countdown\n      } else {\n          var clock = $('#' + this.props.timerID).FlipClock(\n              this.props.secondsRemaining, {\n                  clockFace: 'Counter'\n          });\n          // For some reason we have to do this manually :P\n          setTimeout(function() {\n              setInterval(function() {\n                  clock.decrement();\n              }, 1000);\n          });\n      }\n\n  },\n  render: function() {\n      return (\n        <div id={this.props.timerID} className=\"animated fadeIn\"></div>\n      );\n  }\n});\n\n\nvar ColorBar = React.createClass({\n  getDefaultProps: function() {\n    return {\n      redVal: \"\",\n      greenVal: \"\",\n      blueVal: \"\"\n    }\n  },\n  render: function() {\n    var redVal = this.props.redVal,\n        greenVal = this.props.greenVal,\n        blueVal = this.props.blueVal;\n\n    var style = {\n      backgroundColor:'rgb(' + redVal + ',' + greenVal + ',' + blueVal + ')'\n    };\n    return (\n      <div className=\"color-bar\" style={style}></div>\n    )\n  }\n});\n\nvar ColorPicker = React.createClass({\n  getInitialState: function() {\n    // Convert hex to RGB, remove all whitespace from the hex\n    var rgb = hexToRgb(this.props.hexColor.replace(/ /g,''));\n    return {\n      redValue: rgb.r,\n      greenValue: rgb.g,\n      blueValue: rgb.b\n    }\n  },\n  handleUserInput: function(redValueFromDOM, greenValueFromDOM, blueValueFromDOM) {\n    this.setState({\n      redValue: redValueFromDOM,\n      greenValue: greenValueFromDOM,\n      blueValue: blueValueFromDOM\n    });\n  },\n  render: function() {\n    return (\n      <div>\n        <Slider\n         redVal={this.state.redValue}\n         greenVal={this.state.greenValue}\n         blueVal={this.state.blueValue}\n         onUserInput={this.handleUserInput}\n         inputName={this.props.inputName}\n         enabled={this.props.enabled}\n         />\n        <ColorBar\n        redVal={this.state.redValue}\n        greenVal={this.state.greenValue}\n        blueVal={this.state.blueValue}\n        />\n      </div>\n    )\n  }\n});\n\nvar StarImage = React.createClass({\n  render: function() {\n      return (\n        <img src=\"/static/img/star-sprite.png\" />\n      );\n  }\n});\n\nvar CSRFProtect = React.createClass({\n  render: function() {\n      var divStyle = {display: \"none\"};\n      return (\n        <div style={divStyle}>\n            <input type=\"hidden\" name=\"csrfmiddlewaretoken\" value={this.props.csrfToken} />\n        </div>\n      );\n  }\n});\n\nvar ModalConfirm = React.createClass({\n  handleClick: function() {\n      $('#'+this.props.formID).submit();\n  },\n  render: function() {\n      var actionLink;\n      if (this.props.action) {\n        actionLink = <a id={this.props.submitID} onClick={this.handleClick} className=\"btn btn-danger btn-ok\">{this.props.action}</a>;\n      }\n      return (\n        <div className=\"modal fade\" id={this.props.modalID} role=\"dialog\">\n            <div className=\"modal-dialog\">\n                <div className=\"modal-content\">\n                    <div className=\"modal-header\">\n                        <h4 className=\"modal-title\">{this.props.header}</h4>\n                    </div>\n                    <div className=\"modal-body\">\n                        <p>{this.props.message}</p>\n                    </div>\n                    <div className=\"modal-footer\">\n                        <button type=\"button\" className=\"btn btn-default\" data-dismiss=\"modal\">{this.props.dismiss}</button>\n                        {actionLink}\n                    </div>\n                </div>\n            </div>\n        </div>\n        );\n  }\n});\n\nvar Pagination = React.createClass({\n  render: function() {\n      var pages = parseInt(this.props.maxPages) + 1;\n      var current = parseInt(this.props.currentPage);\n      var links = [];\n      var pageList = [];\n\n      // leading arrows\n      if (current > 1) {\n        links.push([1, \"<<\"]);\n        links.push([current - 1, \"<\"]);\n      }\n\n      for (var i=current-3; i<current+4; i++) {\n        if (i > 0 && i < pages) {\n          links.push([i, i]);\n        }\n      }\n\n      // tailing arrows\n      if (current < pages) {\n        links.push([current + 1, \">\"]);\n        links.push([pages - 1, \">>\"]);\n      }\n\n      links.map(function(x){\n          pageList.push(PageLink(x[0], x[1], current));\n      }, current);\n\n      return (\n        <ul className=\"pagination large-font\">\n            {pageList}\n        </ul>\n    );\n  }\n});\n\nvar Label = React.createClass({\n  render: function() {\n    var labelClasses = \"label label-\" + this.props.labelColor;\n    if (this.props.extraClasses) {\n        labelClasses = labelClasses + \" \" + this.props.extraClasses;\n    }\n    return (\n        <span className={labelClasses}>{this.props.labelContents}</span>\n    );\n  }\n});\n\nvar Form = React.createClass({\n  render: function() {\n    var formID = \"formfield\";\n    var formClass = \"form-\" + this.props.formStyle;\n    if (this.props.formID) {\n        formID = this.props.formID;\n    }\n    return (\n      <form id={formID} className={formClass} role=\"form\"\n            action={this.props.formSubmitUrl} method=\"post\"\n            encType=\"multipart/form-data\" onSubmit={this.props.onFormSubmit}>\n        {this.props.formContents}\n        <CSRFProtect csrfToken={this.props.csrfToken} />\n      </form>\n    );\n  }\n});\n\nvar FormGroup = React.createClass({\n  render: function() {\n    var labelClasses = \"col-md-\" + this.props.labelSize + \" control-label\";\n    var inputSize = \"col-md-\" + this.props.inputSize;\n    var helpBlock;\n    var starImage = \"\";\n    var docs;\n    if (this.props.docs) {\n        docs = <a target=\"_blank\" href={this.props.docs}>Explained Here</a>;\n    }\n    if (this.props.helpBlock) {\n        helpBlock = <span className=\"help-block\">{this.props.helpBlock} {docs}</span>;\n    }\n    if (this.props.premium === \"true\") {\n        starImage = <StarImage />;\n    }\n    return (\n        <div className=\"form-group\">\n            <label className={labelClasses}>{starImage}{this.props.labelContents}</label>\n            <div className={inputSize}>\n                {this.props.input}\n                {helpBlock}\n            </div>\n            {this.props.inputValidLabel}\n        </div>\n    );\n  }\n});\n\nvar FormLabel = React.createClass({\n  render: function() {\n    var label;\n    var labelContents;\n    var colSize = \"col-md-6 col-md-offset-3\";\n    // If a column size was specified\n    if (this.props.colSize) {\n        colSize = this.props.colSize;\n    }\n    if (this.props.error) {\n        labelContents = this.props.error;\n        var labelColor = \"danger\";\n\n    } else if (this.props.action) {\n        labelContents = this.props.action;\n        var labelColor = \"primary\";\n    }\n    return (\n        <div className=\"row\">\n            <div className={colSize}>\n                <Label labelColor={labelColor}\n                       extraClasses=\"x-large-font\"\n                       labelContents={labelContents} />\n                <br />\n            </div>\n         </div>\n    );\n  }\n});\n\nvar Panel = React.createClass({\n  render: function() {\n    var panelAnimate = \"animated fadeIn\";\n    // If a different animation was specified for the panel\n    if (this.props.panelAnimate) {\n        panelAnimate = this.props.panelAnimate;\n    }\n    var panelWidth = \"col-md-\"+this.props.panelWidth;\n    var panelOffset = \"col-md-offset-\"+this.props.panelOffset;\n    var colClasses = 'col ' + panelWidth + ' ' + panelOffset;\n    var panelClasses = 'panel panel-' + this.props.panelColor + ' highlight-shadow ' + panelAnimate;\n    var panelComponents = [];\n    if (this.props.panelHeadingContent) {\n        panelComponents.push(<PanelHeader key=\"1\"\n                                          panelHeadingClasses={this.props.panelHeadingClasses}\n                                          panelHeadingStyle={this.props.panelHeadingStyle}\n                                          panelHeadingContent={this.props.panelHeadingContent}\n                                          panelHeadingLink={this.props.panelHeadingLink} />);\n    }\n    if (this.props.bodyContent) {\n        panelComponents.push(<PanelBody key=\"2\"\n                                        panelBodyClasses={this.props.panelBodyClasses}\n                                        bodyContent={this.props.bodyContent} />);\n    }\n    if (this.props.footerContent) {\n        panelComponents.push(<PanelFooter key=\"3\"\n                                          panelFooterClasses={this.props.panelFooterClasses}\n                                          footerContent={this.props.footerContent} />);\n    }\n    return (\n      <div className=\"row\">\n        <div className={colClasses}>\n          <div className={panelClasses}>\n            {panelComponents}\n          </div>\n        </div>\n      </div>\n    );\n  }\n});\n\nvar PanelHeader = React.createClass({\n  render: function() {\n    var link;\n    var panelHeaderClasses = 'panel-heading ' + this.props.panelHeadingClasses + \" text-shadow\";\n    if (this.props.panelHeadingLink) {\n        link = <span>(<a href={this.props.panelHeadingLink}>Read More</a>)</span>;\n    }\n    return (\n      <div className={panelHeaderClasses} style={this.props.panelHeadingStyle}>{this.props.panelHeadingContent} {link}</div>\n    );\n  }\n});\n\nvar PanelBody = React.createClass({\n  render: function() {\n    var panelBodyClasses = 'panel-body ' + this.props.panelBodyClasses;\n    return (\n      <div className={panelBodyClasses}>\n        {this.props.bodyContent}\n      </div>\n    );\n  }\n});\n\nvar PanelFooter = React.createClass({\n  render: function() {\n    var panelFooterClasses = 'panel-footer ' + this.props.panelFooterClasses;\n    return (\n      <div className={panelFooterClasses}>\n        {this.props.footerContent}\n      </div>\n    );\n  }\n});\n\nvar Badge = React.createClass({\n  render: function() {\n    var badgeClasses = \"badge \" + this.props.badgeClasses;\n    var badgeStyle = {backgroundColor: this.props.badgeColor,\n                      color: \"#fff\"};\n    return (\n      <span className={badgeClasses} style={badgeStyle}>\n        &nbsp;{this.props.content}&nbsp;\n      </span>\n    );\n  }\n});\n\nvar Medal = React.createClass({\n  getInitialState: function() {\n    return {data: []};\n  },\n  componentDidMount: function() {\n    // Get the medal data for the given key\n    var medalUrl = this.props.medalListAPIUrl + this.props.medalID + \"/\";\n    $.ajax({\n      url: medalUrl,\n      dataType: 'json',\n      success: function(data) {\n        this.setState({data: data});\n      }.bind(this),\n      error: function(xhr, status, err) {\n        console.error(this.props.url, status, err.toString());\n      }.bind(this)\n    });\n  },\n  render: function() {\n    var medalURL = \"#\";\n    if (this.props.medalsUrl) {\n        // Create the medal URL\n        medalURL = this.props.medalsUrl + \"#\" + this.state.data.name;\n    }\n    var medalClasses = 'medal pull-left btn-shadow';\n    return (\n      <a href={medalURL}>\n          <div className={medalClasses}>\n              <img src={this.state.data.icon_filename} />\n          </div>\n      </a>\n    );\n  }\n});\n\nvar Loading = React.createClass({\n  render: function() {\n    var barColor;\n    if (!this.props.loadingBarColor) {\n        var divStyle = {backgroundColor: \"#333\"};\n    } else {\n        var divStyle = {backgroundColor: this.props.loadingBarColor};\n    }\n    return (\n        <div className=\"spinner\">\n            <div className=\"rect1\" style={divStyle}></div>\n            <div className=\"rect2\" style={divStyle}></div>\n            <div className=\"rect3\" style={divStyle}></div>\n            <div className=\"rect4\" style={divStyle}></div>\n            <div className=\"rect5\" style={divStyle}></div>\n        </div>\n    );\n  }\n});\n\nvar PlayerImage = React.createClass({\n  getInitialState: function() {\n    return {data: undefined};\n  },\n  componentDidMount: function() {\n    // Get the medal data for the given key\n    var playerUrl = this.props.playerAPIUrl + this.props.playerID + \"/\";\n    $.ajax({\n      url: playerUrl,\n      dataType: 'json',\n      success: function(data) {\n        this.setState({data: data});\n      }.bind(this),\n      error: function(xhr, status, err) {\n        console.error(this.props.url, status, err.toString());\n      }.bind(this)\n    });\n  },\n  render: function() {\n    var playerName;\n    var playerNameClasses = \"btn btn-info btn-lg word-wrap btn-shadow text-shadow \" + this.props.playerNameClasses;\n    if (!this.state.data){\n        return (<div></div>);\n    }\n    if (this.props.showName) {\n        playerName = <button className={playerNameClasses}>{this.state.data.name}</button>\n    }\n    return (\n        <div className=\"animated fadeIn\">\n            <img src={this.state.data.photo_url} className=\"img-responsive img-thumbnail highlight-shadow\" />\n            <br />\n            {playerName}\n        </div>\n    );\n  }\n});\n\nvar Image = React.createClass({\n  render: function() {\n    return (\n      <img src={this.props.image_url} className=\"img-responsive img-thumbnail highlight-shadow\" />\n    );\n  }\n});\n\nvar BigButton = React.createClass({\n  render: function() {\n    var buttonClass = \"btn btn-\" + this.props.buttonColor + \" btn-block btn-lg text-center x-large-font btn-shadow text-shadow\";\n    return (\n        <div className=\"row\">\n            <div className=\"col-md-6 col-md-offset-3\">\n                <a className={buttonClass} href={this.props.buttonLink} role=\"button\">\n                    {this.props.buttonText}\n                </a>\n            </div>\n        </div>\n    );\n  }\n});\n\nvar BigButtonDropdownContents = React.createClass({\n  getInitialState: function() {\n    return {shows: undefined,\n            spans: undefined};\n  },\n  componentDidMount: function() {\n    // Fetch the shows for the channel\n    $.ajax({\n      url: this.props.showAPIUrl,\n      dataType: 'json',\n      success: function(showData) {\n        // If this is a channel leaderboard\n        if (this.props.leaderboardContext) {\n            // Fetch the leaderboard spans for the channel\n            $.ajax({\n              url: this.props.leaderboardContext.leaderboardSpanAPIUrl,\n              dataType: 'json',\n              success: function(spanData) {\n                this.setState({shows: showData,\n                               spans: spanData});\n              }.bind(this),\n              error: function(xhr, status, err) {\n                console.error(this.props.url, status, err.toString());\n              }.bind(this)\n            });\n        } else {\n            this.setState({shows: showData});\n        }\n      }.bind(this),\n      error: function(xhr, status, err) {\n        console.error(this.props.url, status, err.toString());\n      }.bind(this)\n    });\n  },\n  render: function() {\n    var dropDownStyle = {width: \"100%\", textAlign: \"center\"};\n    var dropDownList = [];\n    this.counter = 1;\n\n    if (this.props.leaderboardContext) {\n        var allClass = \"\";\n        if (!this.props.showID && !this.props.spanID) {\n            var allClass = \"disabled\";\n        }\n        dropDownList.push(<li key={this.counter} className={allClass}><a href={this.props.baseLinkUrl}>All-time Leaderboard</a></li>);\n    }\n\n    if (this.state.spans) {\n        // Create the leaderboard span list\n        this.state.spans.map(function (span) {\n            this.counter++;\n            var startDate = getSpanFormat(span.start_date);\n            var endDate = getSpanFormat(span.end_date);\n            var spanUrl = this.props.baseLinkUrl + startDate + \"/\" + endDate + \"/\";\n            dropDownList.push(<li key={this.counter}><a href={spanUrl}>{span.name}</a></li>);\n        }, this);\n    }\n\n    if (this.state.shows) {\n        // Create the show list\n        this.state.shows.map(function (show) {\n            var showClass = \"\";\n            this.counter++;\n            if (this.props.showID == show.id) {\n                showClass = \"disabled\";\n            }\n            var showLink = this.props.baseLinkUrl + 'show/' + show.id + '/';\n            var showDateFormatted = showDateUTCToLocalFormat(show.created);\n            dropDownList.push(<li key={this.counter} className={showClass}><a href={showLink}>{showDateFormatted}</a></li>);\n            return dropDownList;\n        }, this);\n    } else {\n        dropDownList.push(<Loading key=\"999999\"\n                                   loadingBarColor=\"#fff\" />);\n    }\n    return (\n      <ul className=\"dropdown-menu x-large-font text-shadow\" role=\"menu\" style={dropDownStyle}>\n            {dropDownList}\n      </ul>\n    );\n  }\n});\n\nvar BigButtonDropdown = React.createClass({\n  render: function() {\n    var display;\n    var buttonGroupStyle = {width: \"100%\"};\n    var buttonColor = this.props.buttonColor;\n    var buttonClass = \"btn btn-\" + buttonColor + \" btn-block btn-lg dropdown-toggle x-large-font btn-shadow text-shadow\";\n    if (this.props.showID) {\n        display = showDateUTCToLocalFormat(this.props.currentSelection);\n    } else {\n        display = this.props.currentSelection;\n    }\n    return (\n        <div className=\"row\">\n            <div className=\"col-md-6 col-md-offset-3\">\n                <div className=\"btn-group\" style={buttonGroupStyle}>\n                  <button className={buttonClass} data-toggle=\"dropdown\" aria-expanded=\"false\">\n                    {display}&nbsp;<span className=\"caret \"></span>\n                  </button>\n                  <BigButtonDropdownContents leaderboardContext={this.props.leaderboardContext}\n                                             showAPIUrl={this.props.showAPIUrl}\n                                             baseLinkUrl={this.props.baseLinkUrl}\n                                             showID={this.props.showID} />\n                </div>\n            </div>\n        </div>\n    );\n  }\n});\n\nvar DropDownSelect = React.createClass({\n  getInitialState: function() {\n    return {data: undefined};\n  },\n  componentDidMount: function() {\n    $.ajax({\n      url: this.props.listAPIUrl,\n      dataType: 'json',\n      success: function(data) {\n        this.setState({data: data});\n      }.bind(this),\n      error: function(xhr, status, err) {\n        console.error(this.props.url, status, err.toString());\n      }.bind(this)\n    });\n  },\n  componentDidUpdate: function(prev, next) {\n      // Change the select into a multi-select if required\n      if (this.props.multiple === \"true\") {\n          $(ReactDOM.findDOMNode(this)).multiSelect();\n      }\n  },\n  render: function() {\n    var optionList = [];\n    var selectID;\n    var selectElement;\n    var loadingBarColor;\n    if (this.props.loadingBarColor) {\n        loadingBarColor = this.props.loadingBarColor;\n    } else {\n        loadingBarColor = \"#fff\";\n    }\n    if (!this.state.data){\n        return (<div>\n                    <Loading loadingBarColor={loadingBarColor} />\n                </div>);\n    }\n    if (!this.props.selectID) {\n        selectID = \"selectID\";\n    } else {\n        selectID = this.props.selectID;\n    }\n    this.counter = 0;\n    if (this.props.defaultText) {\n        optionList.push(<option key=\"0\" value=\"\">{this.props.defaultText}</option>);\n    }\n    // Create the suggestion list\n    this.state.data.map(function (item) {\n        this.counter++;\n        var display;\n        if (this.props.convertCreatedTimestamp) {\n            display = showDateUTCToLocalFormat(item.created);\n        } else {\n            display = item.name;\n        }\n        optionList.push(<option key={this.counter} value={item.id}>{display}</option>);\n        return optionList;\n    }, this);\n\n    if (this.props.multiple === \"true\") {\n        return (<select multiple=\"multiple\" name={selectID} id={selectID} className=\"form-control\">\n                    {optionList}\n                </select>);\n    } else {\n        return (<select id={selectID} className=\"form-control\" name={selectID} onChange={this.props.selectEventHandler} defaultValue={this.props.defaultSelected}>\n                    {optionList}\n                </select>);\n    }\n  }\n});\n\n\nvar BottomNavSelect = React.createClass({\n  getInitialState: function() {\n    return {data: undefined};\n  },\n  componentDidMount: function() {\n    $.ajax({\n      url: this.props.listAPIUrl,\n      dataType: 'json',\n      success: function(data) {\n        this.setState({data: data});\n      }.bind(this),\n      error: function(xhr, status, err) {\n        console.error(this.props.url, status, err.toString());\n      }.bind(this)\n    });\n  },\n  render: function() {\n    var optionList = [];\n    var selectedID;\n    var itemLink;\n    if (!this.state.data){\n        return (<div></div>);\n    }\n    this.counter = 0;\n    // Create the suggestion list\n    this.state.data.map(function (item) {\n        this.counter++;\n        itemLink = this.props.baseLinkUrl + item.id + \"/\";\n        if (parseInt(this.props.selectedID) == item.id) {\n            optionList.push(<li key={this.counter} className=\"active\"><a href={itemLink}><span className=\"bottom-nav-item\">{item.display_name}</span></a></li>);\n        } else {\n            optionList.push(<li key={this.counter}><a href={itemLink}><span className=\"bottom-nav-item\">{item.display_name}</span></a></li>);\n        }\n        return optionList;\n    }, this);\n\n    return (\n        <nav className=\"navbar navbar-inverse navbar-fixed-bottom nav-bottom\" role=\"navigation\">\n            <div className=\"container-fluid\">\n                <div className=\"navbar-header text-shadow\">\n                    <li className=\"dropdown\">\n                        <a className=\"dropdown-toggle navbar-brand\" data-toggle=\"dropdown\" href=\"#\"><span className=\"bottom-nav-item pull-left\">{this.props.label}&nbsp;</span><div className=\"caret-up\"></div></a>\n                        <ul className=\"dropdown-menu\" role=\"menu\">\n                            {optionList}\n                        </ul>\n                    </li>\n                </div>\n            </div>\n        </nav>);\n  }\n});\n\n\n///////////////////////////////////////////////////////////////////////////////////////////\n///////////////////////////////////// FORM COMPONENTS /////////////////////////////////////\n///////////////////////////////////////////////////////////////////////////////////////////\n\nvar ChannelCreateEditForm = React.createClass({\n  getInitialState: function() {\n    return {data: {name: \"\",\n                   display_name: \"\",\n                   email: \"\",\n                   short_description: \"\",\n                   description: \"\",\n                   website: \"\",\n                   facebook_page: \"\",\n                   buy_tickets_link: \"\",\n                   next_show: \"\",\n                   navbar_color: \"#4596FF\",\n                   background_color: \"#000000\",\n                   address: {street: \"\",\n                             city: \"\",\n                             state: \"\",\n                             zipcode: \"\"}},\n            key: \"0\"\n    };\n  },\n  componentDidMount: function() {\n    if (this.props.channelCreateEditContext.channelID) {\n        $.ajax({\n          url: this.props.channelCreateEditContext.channelAPIUrl,\n          dataType: 'json',\n          success: function(data) {\n            this.setState({data: data,\n                           key: \"2\"});\n          }.bind(this),\n          error: function(xhr, status, err) {\n            console.error(this.props.url, status, err.toString());\n          }.bind(this)\n        });\n    }\n    $('#next-show-picker').datetimepicker({\n        format: 'YYYY-MM-DD HH:mm'\n    });\n  },\n  componentDidUpdate: function(prev, next) {\n      $('#next-show-picker').datetimepicker({\n          format: 'YYYY-MM-DD HH:mm'\n      });\n  },\n  onFormSubmit: function(event) {\n      limitFileSize(event, 'teamPhotoFile', \"Team Photo File\");\n      validateTextField(event, \"name\", \"Url Name\");\n      validateTextField(event, \"display_name\", \"Display Name\", true);\n  },\n  validateName: function(event) {\n      // Wait a milisecond\n      window.setTimeout((function(){\n          var valid = validateChannelName();\n          // Create the API url for checking if the name exists\n          var channelNameAPIUrl = this.props.channelCreateEditContext.channelNameAPIUrl + event.target.value;\n          $.ajax({\n              url: channelNameAPIUrl,\n              dataType: 'json',\n              success: function(data) {\n                  // If the name is already taken\n                  if (data == true) {\n                      this.setState({\n                           data: this.state.data,\n                           key: this.state.key,\n                           validName: valid,\n                           nameTaken: true});\n                  // If the name is available\n                  } else {\n                      this.setState({\n                           data: this.state.data,\n                           key: this.state.key,\n                           validName: valid,\n                           nameTaken: false});\n                  }\n              }.bind(this),\n              error: function(xhr, status, err) {\n                console.error(this.props.url, status, err.toString());\n              }.bind(this)\n          });\n      }).bind(this), 100);\n  },\n  render: function() {\n    var actionText;\n    var nameValidLabel;\n    if (this.props.channelCreateEditContext.channelID) { \n        actionText = \"Edit Channel\";\n     } else {\n        actionText = \"Create Channel\"; \n    }\n    var formContents = [];\n    // Premium features key\n    formContents.push(<div key=\"premium-1\" className=\"row\"><div className=\"col-md-12\"><StarImage /> = Premium Feature</div><br /><br /></div>);\n    // Name Input\n    var nameInput = <input type=\"text\" id=\"name\" name=\"name\" onKeyDown={this.validateName} defaultValue={this.state.data.name} className=\"form-control\" autoComplete=\"off\"></input>;\n    // If the name is invalid\n    if (this.state.validName == false) {\n        nameValidLabel = <div className=\"alert alert-danger pull-left\" role=\"alert\"><span className=\"glyphicon glyphicon-remove\" aria-hidden=\"true\"></span> Invalid name</div>;\n    // If the name is already taken\n    } else if (this.state.nameTaken) {\n        nameValidLabel = <div className=\"alert alert-danger pull-left\" role=\"alert\"><span className=\"glyphicon glyphicon-remove\" aria-hidden=\"true\"></span> Name taken</div>;\n    // If this isn't the initial load of the form\n    } else if (this.state.validName !== undefined) {\n        nameValidLabel = <div className=\"alert alert-success pull-left\" role=\"alert\"><span className=\"glyphicon glyphicon-ok\" aria-hidden=\"true\"></span> Name available!</div>;\n    }\n    formContents.push(<FormGroup key=\"1\"\n                                 labelSize=\"2\"\n                                 labelContents=\"Url Name*:\"\n                                 inputSize=\"5\"\n                                 input={nameInput}\n                                 inputValidLabel={nameValidLabel}\n                                 helpBlock=\"Required: Used as the url address and can only be lowercase letters, numbers, or hyphens\" />);\n    // Display Name Input\n    var displayNameInput = <input type=\"text\" id=\"display_name\" name=\"display_name\" defaultValue={this.state.data.display_name} className=\"form-control\"></input>;\n    formContents.push(<FormGroup key=\"2\"\n                                 labelSize=\"2\"\n                                 labelContents=\"Display Name*:\"\n                                 inputSize=\"5\"\n                                 input={displayNameInput}\n                                 helpBlock=\"Required: Used as the human readable name on the site\" />);\n    // Email Input\n    var emailInput = <input type=\"text\" id=\"email\" name=\"email\" defaultValue={this.props.channelCreateEditContext.contactEmail} className=\"form-control\"></input>;\n    formContents.push(<FormGroup key=\"19\"\n                                 labelSize=\"2\"\n                                 labelContents=\"Contact Email*:\"\n                                 inputSize=\"5\"\n                                 input={emailInput}\n                                 helpBlock=\"Required: This is for internal use only and is not publicly visible or shared.\" />);\n    // Short Description Input\n    var shortDescriptionInput = <textarea type=\"text\" name=\"short_description\" maxLength=\"100\" rows=\"2\" defaultValue={this.state.data.short_description} className=\"form-control\"></textarea>;\n    formContents.push(<FormGroup key=\"3\"\n                                 labelSize=\"2\"\n                                 labelContents=\"Short Description:\"\n                                 inputSize=\"7\"\n                                 input={shortDescriptionInput} />);\n    // Description Input\n    var DescriptionInput = <textarea type=\"text\" name=\"description\" rows=\"5\" defaultValue={this.state.data.description} className=\"form-control\"></textarea>;\n    formContents.push(<FormGroup key=\"4\"\n                                 labelSize=\"2\"\n                                 labelContents=\"Description:\"\n                                 inputSize=\"8\"\n                                 input={DescriptionInput}\n                                 helpBlock=\"Used on the channel's about page\" />);\n    // Team Photo Input\n    var teamPhotoInput = <div><span className=\"btn btn-primary btn-file\"><input id=\"teamPhotoFile\" type=\"file\" name=\"teamPhotoFile\"></input></span><Image image_url={this.state.data.team_photo_url} /></div>;\n    formContents.push(<FormGroup key=\"6\"\n                                 labelSize=\"2\"\n                                 labelContents=\"Team Photo:\"\n                                 inputSize=\"3\"\n                                 input={teamPhotoInput}\n                                 helpBlock=\"Used on the channel's about page and show display, must be smaller than 2MB\" />);\n    // Website Input\n    var websiteInput = <input type=\"text\" name=\"website\" defaultValue={this.state.data.website} className=\"form-control\"></input>;\n    formContents.push(<FormGroup key=\"7\"\n                                 labelSize=\"2\"\n                                 labelContents=\"Website:\"\n                                 inputSize=\"7\"\n                                 input={websiteInput}\n                                 helpBlock=\"Your group's external website\" />);\n    // Facebook Page Input\n    var facebookPageInput = <input type=\"text\" name=\"facebook_page\" defaultValue={this.state.data.facebook_page} className=\"form-control\"></input>;\n    formContents.push(<FormGroup key=\"8\"\n                                 labelSize=\"2\"\n                                 labelContents=\"Facebook Page:\"\n                                 inputSize=\"7\"\n                                 premium=\"true\"\n                                 input={facebookPageInput}\n                                 helpBlock=\"Your group's Facebook page, 'Like Our Page' links added for premium channels\" />);\n    // Buy Tickets Input\n    var buyTicketsInput = <input type=\"text\" name=\"buy_tickets_link\" defaultValue={this.state.data.buy_tickets_link} className=\"form-control\"></input>;\n    formContents.push(<FormGroup key=\"9\"\n                                 labelSize=\"2\"\n                                 labelContents=\"Buy Tickets URL:\"\n                                 inputSize=\"7\"\n                                 premium=\"true\"\n                                 input={buyTicketsInput}\n                                 helpBlock=\"The URL to buy tickets to your shows, premium feature only\" />);\n    // Next Show\n    var nextShowInput = (\n        <div className='input-group date' id='next-show-picker'>\n            <input type=\"text\" id=\"next_show\" name=\"next_show\" className=\"form-control\" defaultValue={this.state.data.next_show.replace('Z','')}></input>\n            <span className=\"input-group-addon\">\n                <span className=\"glyphicon glyphicon-calendar\"></span>\n            </span>\n        </div>\n    );\n    formContents.push(<FormGroup key=\"10\"\n                                 labelSize=\"2\"\n                                 labelContents=\"Next Show:\"\n                                 inputSize=\"5\"\n                                 input={nextShowInput}\n                                 helpBlock=\"When your next show is scheduled, appears on your channel's homepage\" />);\n    // Navbar Color Input (Requires Premium)\n    var navbarColorInput = <ColorPicker hexColor={this.state.data.navbar_color}\n                                        inputName=\"navbar_color\"\n                                        enabled={this.props.channelCreateEditContext.isPremium} />;\n    formContents.push(<FormGroup key=\"17\"\n                                 labelSize=\"2\"\n                                 labelContents=\"Navigation Bar Color:\"\n                                 inputSize=\"4\"\n                                 premium=\"true\"\n                                 input={navbarColorInput}\n                                 helpBlock=\"The color of your channel's Navigation Bar\" />);\n    // Background Color Input (Requires Premium)\n    var backgroundColorInput = <ColorPicker hexColor={this.state.data.background_color}\n                                            inputName=\"background_color\"\n                                            enabled={this.props.channelCreateEditContext.isPremium} />;\n    formContents.push(<FormGroup key=\"18\"\n                                 labelSize=\"2\"\n                                 labelContents=\"Background Color:\"\n                                 inputSize=\"4\"\n                                 premium=\"true\"\n                                 input={backgroundColorInput}\n                                 helpBlock=\"The color of your channel's background\" />);\n    // ADDRESS //\n    // Street Input\n    var streetInput = <input type=\"text\" name=\"street\" defaultValue={this.state.data.address.street} className=\"form-control\"></input>;\n    formContents.push(<FormGroup key=\"12\"\n                                 labelSize=\"2\"\n                                 labelContents=\"Street Address:\"\n                                 inputSize=\"6\"\n                                 input={streetInput}\n                                 helpBlock=\"The street address where you perform your shows, used for mapping\" />);\n    // City Input\n    var cityInput = <input type=\"text\" name=\"city\" defaultValue={this.state.data.address.city} className=\"form-control\"></input>;\n    formContents.push(<FormGroup key=\"13\"\n                                 labelSize=\"2\"\n                                 labelContents=\"City:\"\n                                 inputSize=\"5\"\n                                 input={cityInput} />);\n    // State Input\n    var stateInput = <input type=\"text\" name=\"state\" maxLength=\"2\" defaultValue={this.state.data.address.state} className=\"form-control\"></input>;\n    formContents.push(<FormGroup key=\"14\"\n                                 labelSize=\"2\"\n                                 labelContents=\"State:\"\n                                 inputSize=\"2\"\n                                 input={stateInput} />);\n    // Zipcode Input\n    var zipcodeInput = <input type=\"text\" name=\"zipcode\" defaultValue={this.state.data.address.zipcode} className=\"form-control\"></input>;\n    formContents.push(<FormGroup key=\"15\"\n                                 labelSize=\"2\"\n                                 labelContents=\"Zipcode:\"\n                                 inputSize=\"3\"\n                                 input={zipcodeInput} />);\n\n    // Spacing\n    formContents.push(<div key=\"spacing-div-1\"><br /><br /></div>);\n\n    // Submit Button\n    var submitButton = <button type=\"submit\" className=\"btn btn-info btn-shadow large-font text-shadow\">{actionText}</button>;\n    formContents.push(<FormGroup key=\"16\"\n                                 inputSize=\"2\"\n                                 input={submitButton} />);\n\n    // The entire Form\n    var bodyContent = [<Form key=\"form-1\"\n                             formStyle=\"horizontal\"\n                             formSubmitUrl={this.props.channelCreateEditContext.formSubmitUrl}\n                             formContents={formContents}\n                             onFormSubmit={this.onFormSubmit}\n                             csrfToken={this.props.channelCreateEditContext.csrfToken} />];\n\n    // If we're on the edit channel page. Add a delete button\n    if (this.props.channelCreateEditContext.channelID) {\n        var deleteContents = [];\n        var message = \"Are you sure you wish to delete the \" + this.state.data.display_name + \" Channel?\";\n        // Delete Button\n        deleteContents.push(<div key=\"spacing-div-2\"><br /><br /><br /></div>);\n        deleteContents.push(<input key=\"1\" type=\"button\" value=\"DELETE CHANNEL\" className=\"btn btn-danger btn-shadow text-shadow\" data-toggle=\"modal\" data-target=\"#confirm-delete\" />);\n        deleteContents.push(<input key=\"2\" type=\"hidden\" name=\"delete\" value={this.props.channelCreateEditContext.channelID}></input>);\n        deleteContents.push(<ModalConfirm key=\"3\"\n                                          modalID=\"confirm-delete\"\n                                          submitID=\"submit-delete\"\n                                          formID=\"deleteForm\"\n                                          action=\"Delete\"\n                                          dismiss=\"Cancel\"\n                                          header=\"Delete Channel\"\n                                          message={message} />);\n        bodyContent.push(<Form key=\"form-2\"\n                               formID=\"deleteForm\"\n                               formSubmitUrl={this.props.channelCreateEditContext.formSubmitUrl}\n                               formContents={deleteContents}\n                               csrfToken={this.props.channelCreateEditContext.csrfToken} />);\n    }\n\n    return (\n        <div key={this.state.key}>\n            <br/>\n            <br/>\n            <FormLabel action={this.props.channelCreateEditContext.action}\n                       error={this.props.channelCreateEditContext.error} />\n            <Panel panelWidth=\"6\" panelOffset=\"3\" panelColor=\"danger\"\n                   panelHeadingContent={actionText} panelHeadingClasses=\"x-large-font\"\n                   panelBodyClasses=\"white-background\"\n                   panelHeadingLink=\"http://docs.dumpedit.com/en/latest/channels.html\"\n                   bodyContent={bodyContent} />\n        </div>\n    );\n  }\n});\n\nvar PlayerForm = React.createClass({\n  getInitialState: function() {\n    return {data: {name: \"\",\n                   active: true,\n                   star: false},\n            editPlayerID: undefined,\n            key: \"0\"};\n  },\n  componentDidMount: function() {\n    // If a show has been selected\n    if (this.state.editPlayerID) {\n        var playerAPIUrl = this.props.addPlayerContext.playerAPIUrl + this.state.editPlayerID + \"/\";\n        $.ajax({\n          url: playerAPIUrl,\n          dataType: 'json',\n          success: function(data) {\n            this.setState({data: data,\n                           editPlayerID: this.state.editPlayerID,\n                           key: this.state.editPlayerID});\n          }.bind(this),\n          error: function(xhr, status, err) {\n            console.error(this.props.url, status, err.toString());\n          }.bind(this)\n        });\n    }\n  },\n  onFormSubmit: function(event) {\n      validateTextField(event, \"player_name\", \"Player Name\", true);\n      limitFileSize(event, 'inputFile', \"Player Image File\");\n  },\n  handleEditPlayer: function(event) {\n      this.setState({editPlayerID: event.target.value}, function() {\n          this.componentDidMount();\n      });\n  },\n  render: function() {\n    var formContents = [];\n    // Player Name Input\n    var playerNameInput = <input type=\"text\" id=\"player_name\" name=\"player_name\" defaultValue={this.state.data.name} className=\"form-control\"></input>;\n    formContents.push(<FormGroup key=\"1\"\n                                 labelSize=\"2\"\n                                 labelContents=\"Player Name*:\"\n                                 inputSize=\"4\"\n                                 input={playerNameInput}/>);\n    // Player Photo Input\n    var playerPhotoInput = <div><br/><span className=\"btn btn-primary btn-file\"><input id=\"inputFile\" type=\"file\" name=\"file\"></input></span></div>;\n    formContents.push(<FormGroup key=\"2\"\n                                 labelSize=\"2\"\n                                 labelContents=\"Upload Player Photo:\"\n                                 inputSize=\"4\"\n                                 input={playerPhotoInput}\n                                 helpBlock=\"Image file size must be smaller than 2MB\" />);\n    // Active Input\n    var activeInput = <input type=\"checkbox\" name=\"active\" value=\"1\" defaultChecked={this.state.data.active}></input>;\n    formContents.push(<FormGroup key=\"3\"\n                                 labelSize=\"2\"\n                                 labelContents=\"Player Active:\"\n                                 inputSize=\"4\"\n                                 input={activeInput}\n                                 helpBlock=\"Check this if the player should appear in the Create Show form\" />);\n    // Star Input\n    var starInput = <input type=\"checkbox\" name=\"star\" value=\"1\" defaultChecked={this.state.data.star}></input>;\n    formContents.push(<FormGroup key=\"4\"\n                                 labelSize=\"2\"\n                                 labelContents=\"Featured Player:\"\n                                 inputSize=\"4\"\n                                 input={starInput}\n                                 helpBlock=\"Check this if the player should be prioritized first in shows\" />);\n    // Submit Button\n    var submitButton = <button type=\"submit\" className=\"btn btn-danger btn-shadow text-shadow\">Create/Edit Player</button>;\n    formContents.push(<FormGroup key=\"5\"\n                                 inputSize=\"2\"\n                                 input={submitButton} />);\n    // Edit Player Dropdown Input\n    var playerEditInput = <DropDownSelect listAPIUrl={this.props.addPlayerContext.playerListAPIUrl}\n                                          selectEventHandler={this.handleEditPlayer}\n                                          selectID=\"playerID\"\n                                          defaultSelected={this.state.editPlayerID}\n                                          defaultText=\"Select a Player to Edit\"\n                                          loadingBarColor=\"#000\" />;\n    formContents.push(<FormGroup key=\"6\"\n                                 labelSize=\"2\"\n                                 labelContents=\"Edit Player:\"\n                                 inputSize=\"4\"\n                                 input={playerEditInput}\n                                 helpBlock=\"Select a player if you wish to edit them\" />);\n\n    // If we're editing a player, show their photo\n    if (this.state.editPlayerID) {\n        formContents.push(<div key=\"7\" className=\"row\">\n                            <div className=\"col-md-4 col-md-offset-2\">\n                                <PlayerImage playerAPIUrl={this.props.addPlayerContext.playerAPIUrl}\n                                             playerID={this.state.editPlayerID}/>\n                            </div>\n                          </div>);\n    }\n    var bodyContent = [<Form key=\"form-1\"\n                             formStyle=\"horizontal\"\n                             formSubmitUrl={this.props.addPlayerContext.formSubmitUrl}\n                             formContents={formContents}\n                             onFormSubmit={this.onFormSubmit}\n                             csrfToken={this.props.addPlayerContext.csrfToken} />];\n\n    // If we're editing a player, add a delete button\n    if (this.state.editPlayerID) {\n        var deleteContents = [];\n        var message = \"Are you sure you wish to delete \" + this.state.data.name + \"?\";\n        // Delete Button\n        deleteContents.push(<input key=\"1\" type=\"button\" value=\"DELETE PLAYER\" className=\"btn btn-info btn-shadow text-shadow\" data-toggle=\"modal\" data-target=\"#confirm-delete\" />);\n        deleteContents.push(<input key=\"2\" type=\"hidden\" name=\"delete\" value={this.state.editPlayerID}></input>);\n        deleteContents.push(<ModalConfirm key=\"3\"\n                                          modalID=\"confirm-delete\"\n                                          submitID=\"submit-delete\"\n                                          formID=\"deleteForm\"\n                                          action=\"Delete\"\n                                          dismiss=\"Cancel\"\n                                          header=\"Delete Player\"\n                                          message={message} />);\n        bodyContent.push(<Form key=\"form-2\"\n                               formID=\"deleteForm\"\n                               formSubmitUrl={this.props.addPlayerContext.formSubmitUrl}\n                               formContents={deleteContents}\n                               csrfToken={this.props.addPlayerContext.csrfToken} />);\n    }\n\n    return (\n        <div key={this.state.key}>\n            <FormLabel action={this.props.addPlayerContext.action}\n                       error={this.props.addPlayerContext.error} />\n            <Panel panelWidth=\"6\" panelOffset=\"3\" panelColor=\"info\"\n                   panelHeadingContent=\"Create/Edit Player\" panelHeadingClasses=\"x-large-font\"\n                   panelBodyClasses=\"white-background\"\n                   panelHeadingLink=\"http://docs.dumpedit.com/en/latest/players.html\"\n                   bodyContent={bodyContent} />\n        </div>\n    );\n  }\n});\n\n\nvar SuggestionPoolForm = React.createClass({\n  getInitialState: function() {\n    return {data: {name: \"\",\n                   display_name: \"\",\n                   description: 'Instructive **Markdown** text used to help guide users on what suggestions to enter',\n                   max_user_suggestions: 5,\n                   admin_only: false,\n                   require_login: false,\n                   active: true},\n            suggestionPoolID: undefined,\n            key: \"0\"};\n  },\n  componentDidMount: function() {\n    // If a show has been selected\n    if (this.state.suggestionPoolID) {\n        var suggestionPoolAPIUrl = this.props.suggestionPoolContext.suggestionPoolAPIUrl + this.state.suggestionPoolID + \"/\";\n        $.ajax({\n          url: suggestionPoolAPIUrl,\n          dataType: 'json',\n          success: function(data) {\n            this.setState({data: data,\n                           suggestionPoolID: this.state.suggestionPoolID,\n                           key: this.state.suggestionPoolID});\n          }.bind(this),\n          error: function(xhr, status, err) {\n            console.error(this.props.url, status, err.toString());\n          }.bind(this)\n        });\n    }\n  },\n  onFormSubmit: function(event) {\n      validateTextField(event, \"name\", \"Name\");\n      validateTextField(event, \"display_name\", \"Display Name\", true);\n      validateTextField(event, \"max_user_suggestions\", \"User Suggestion Limit\");\n  },\n  editEventHandler: function(event) {\n      this.setState({suggestionPoolID: event.target.value}, function() {\n          this.componentDidMount();\n      });\n  },\n  render: function() {\n    var formContents = [];\n    // Premium features key\n    formContents.push(<div key=\"premium-1\" className=\"row\"><div className=\"col-md-12\"><StarImage /> = Premium Feature</div><br /><br /></div>);\n    // Name Input\n    var nameInput = <input type=\"text\" id=\"name\" name=\"name\" defaultValue={this.state.data.name} className=\"form-control\"></input>;\n    formContents.push(<FormGroup key=\"1\"\n                                 labelSize=\"2\"\n                                 labelContents=\"Name*:\"\n                                 inputSize=\"4\"\n                                 input={nameInput}/>);\n    // Display Name Input\n    var displayNameInput = <input type=\"text\" id=\"display_name\" name=\"display_name\" defaultValue={this.state.data.display_name} className=\"form-control\"></input>;\n    formContents.push(<FormGroup key=\"2\"\n                                 labelSize=\"2\"\n                                 labelContents=\"Display Name*:\"\n                                 inputSize=\"4\"\n                                 input={displayNameInput}\n                                 helpBlock=\"Name that appears to users\" />);\n    // Description Input\n    var descriptionInput = <textarea type=\"text\" name=\"description\" rows=\"5\" defaultValue={this.state.data.description} className=\"form-control\"></textarea>;\n    formContents.push(<FormGroup key=\"3\"\n                                 labelSize=\"2\"\n                                 labelContents=\"Description:\"\n                                 inputSize=\"8\"\n                                 input={descriptionInput}\n                                 helpBlock=\"Used to instruct users on what types of suggestions to enter. Supports Markdown.\"\n                                 docs=\"http://docs.dumpedit.com/en/latest/suggestion_pools.html#suggestion-pools-description\" />);\n    // Max User Suggestions Input\n    var maxUserSuggestionsInput = <input type=\"text\" id=\"max_user_suggestions\" name=\"max_user_suggestions\" maxLength=\"3\" defaultValue={this.state.data.max_user_suggestions} className=\"form-control\"></input>;\n    formContents.push(<FormGroup key=\"4\"\n                                 labelSize=\"2\"\n                                 labelContents=\"User Suggestion Limit*:\"\n                                 inputSize=\"2\"\n                                 input={maxUserSuggestionsInput}\n                                 helpBlock=\"How many suggestions each user can enter for this suggestion pool\"\n                                 docs=\"http://docs.dumpedit.com/en/latest/suggestion_pools.html#suggestion-pools-user-suggestion-limit\" />);\n    // Admin Only Input\n    var adminOnlyInput = <input type=\"checkbox\" name=\"admin_only\" value=\"1\" defaultChecked={this.state.data.admin_only}></input>;\n    formContents.push(<FormGroup key=\"5\"\n                                 labelSize=\"2\"\n                                 labelContents=\"Admin Suggestions Only:\"\n                                 inputSize=\"4\"\n                                 input={adminOnlyInput}\n                                 helpBlock=\"Check this if only admin can enter suggestions in this pool\"\n                                 docs=\"http://docs.dumpedit.com/en/latest/suggestion_pools.html#suggestion-pools-admin-suggestions-only\" />);\n    // Require Login Input (Requires Premium)\n    if (this.props.suggestionPoolContext.isPremium === \"True\") {\n        var requireLoginInput = <input type=\"checkbox\" name=\"require_login\" value=\"1\" defaultChecked={this.state.data.require_login}></input>;\n    } else {\n        var requireLoginInput = <input type=\"checkbox\" name=\"require_login\" value=\"1\" disabled=\"true\"></input>;\n    }\n    formContents.push(<FormGroup key=\"6\"\n                                 labelSize=\"2\"\n                                 labelContents=\"Require Login:\"\n                                 premium=\"true\"\n                                 inputSize=\"5\"\n                                 input={requireLoginInput}\n                                 helpBlock=\"Check this if users are required to login to add suggestions\"\n                                 docs=\"http://docs.dumpedit.com/en/latest/suggestion_pools.html#suggestion-pools-require-login\" />);\n    // Active Input\n    var activeInput = <input type=\"checkbox\" name=\"active\" value=\"1\" defaultChecked={this.state.data.active}></input>;\n    formContents.push(<FormGroup key=\"7\"\n                                 labelSize=\"2\"\n                                 labelContents=\"Suggestion Pool Active:\"\n                                 inputSize=\"4\"\n                                 input={activeInput}\n                                 helpBlock=\"Check this if the Suggestion Pool should appear in the Create/Edit Vote Types form\" />);\n    // Submit Button\n    var submitButton = <button type=\"submit\" className=\"btn btn-danger btn-shadow text-shadow\">Create/Edit Suggestion Pool</button>;\n    formContents.push(<FormGroup key=\"8\"\n                                 inputSize=\"2\"\n                                 input={submitButton} />);\n    // Edit Suggestion Pool Dropdown Input\n    var suggestionPoolEditInput = <DropDownSelect listAPIUrl={this.props.suggestionPoolContext.suggestionPoolListAPIUrl}\n                                                  selectEventHandler={this.editEventHandler}\n                                                  defaultSelected={this.state.suggestionPoolID}\n                                                  defaultText=\"Select a Suggestion Pool to Edit\"\n                                                  loadingBarColor=\"#000\" />;\n    formContents.push(<FormGroup key=\"9\"\n                                 labelSize=\"2\"\n                                 labelContents=\"Edit Suggestion Pool:\"\n                                 inputSize=\"4\"\n                                 input={suggestionPoolEditInput}\n                                 helpBlock=\"Select a Suggestion Pool if you wish to edit it\" />);\n\n    var bodyContent = [<Form key=\"form-1\"\n                             formStyle=\"horizontal\"\n                             formSubmitUrl={this.props.suggestionPoolContext.formSubmitUrl}\n                             formContents={formContents}\n                             onFormSubmit={this.onFormSubmit}\n                             csrfToken={this.props.suggestionPoolContext.csrfToken} />];\n\n    // If we're editing a suggestion pool, add a delete button\n    if (this.state.suggestionPoolID) {\n        var deleteContents = [];\n        var message = \"Are you sure you wish to delete the \" + this.state.data.name + \" suggestion pool?\";\n        // Delete Button\n        deleteContents.push(<input key=\"1\" type=\"button\" value=\"DELETE SUGGESTION POOL\" className=\"btn btn-info btn-shadow text-shadow\" data-toggle=\"modal\" data-target=\"#confirm-delete\" />);\n        deleteContents.push(<input key=\"2\" type=\"hidden\" name=\"delete\" value={this.state.suggestionPoolID}></input>);\n        deleteContents.push(<ModalConfirm key=\"3\"\n                                          modalID=\"confirm-delete\"\n                                          submitID=\"submit-delete\"\n                                          formID=\"deleteForm\"\n                                          action=\"Delete\"\n                                          dismiss=\"Cancel\"\n                                          header=\"Delete Suggestion Pool\"\n                                          message={message} />);\n        bodyContent.push(<Form key=\"form-2\"\n                               formID=\"deleteForm\"\n                               formSubmitUrl={this.props.suggestionPoolContext.formSubmitUrl}\n                               formContents={deleteContents}\n                               csrfToken={this.props.suggestionPoolContext.csrfToken} />);\n    }\n\n    return (\n        <div key={this.state.key}>\n            <FormLabel action={this.props.suggestionPoolContext.action}\n                       error={this.props.suggestionPoolContext.error} />\n            <Panel panelWidth=\"6\" panelOffset=\"3\" panelColor=\"info\"\n                   panelHeadingContent=\"Create/Edit Suggestion Pools\" panelHeadingClasses=\"x-large-font\"\n                   panelBodyClasses=\"white-background\"\n                   panelHeadingLink=\"http://docs.dumpedit.com/en/latest/suggestion_pools.html\"\n                   bodyContent={bodyContent} />\n        </div>\n    );\n  }\n});\n\nvar VoteTypeForm = React.createClass({\n  getInitialState: function() {\n    return {data: {name: \"\",\n                   display_name: \"\",\n                   suggestion_pool: undefined,\n                   preshow_selected: false,\n                   intervals: \"\",\n                   manual_interval_control: true,\n                   style: undefined,\n                   ordering: 0,\n                   options: 3,\n                   vote_length: 25,\n                   result_length: 10,\n                   button_color: \"#1c33ff\",\n                   require_login: false,\n                   active: true},\n            voteTypeID: undefined,\n            key: \"0\"};\n  },\n  componentDidMount: function() {\n    // If a show has been selected\n    if (this.state.voteTypeID) {\n        var voteTypeAPIUrl = this.props.voteTypeContext.voteTypeAPIUrl + this.state.voteTypeID + \"/\";\n        $.ajax({\n          url: voteTypeAPIUrl,\n          dataType: 'json',\n          success: function(data) {\n            this.setState({data: data,\n                           voteTypeID: this.state.voteTypeID,\n                           key: this.state.voteTypeID});\n          }.bind(this),\n          error: function(xhr, status, err) {\n            console.error(this.props.url, status, err.toString());\n          }.bind(this)\n        });\n    }\n  },\n  onFormSubmit: function(event) {\n      validateTextField(event, \"name\", \"Name\");\n      validateTextField(event, \"display_name\", \"Display Name\", true);\n      validateDropDown(event, \"style\", \"Voting Style\");\n      validateTextField(event, \"ordering\", \"Order\");\n      validateTextField(event, \"options\", \"Voting Options\");\n      validateTextField(event, \"vote_length\", \"Voting Length\");\n      validateTextField(event, \"result_length\", \"Voted Result Display Length\");\n  },\n  editEventHandler: function(event) {\n      this.setState({voteTypeID: event.target.value}, function() {\n          this.componentDidMount();\n      });\n  },\n  render: function() {\n    var formContents = [];\n    // Premium features key\n    formContents.push(<div key=\"premium-1\" className=\"row\"><div className=\"col-md-12\"><StarImage /> = Premium Feature</div><br /><br /></div>);\n    // Name Input\n    var nameInput = <input type=\"text\" id=\"name\" name=\"name\" defaultValue={this.state.data.name} className=\"form-control\"></input>;\n    formContents.push(<FormGroup key=\"1\"\n                                 labelSize=\"2\"\n                                 labelContents=\"Name*:\"\n                                 inputSize=\"4\"\n                                 input={nameInput}/>);\n    // Display Name Input\n    var displayNameInput = <input type=\"text\" id=\"display_name\" name=\"display_name\" defaultValue={this.state.data.display_name} className=\"form-control\"></input>;\n    formContents.push(<FormGroup key=\"2\"\n                                 labelSize=\"2\"\n                                 labelContents=\"Display Name*:\"\n                                 inputSize=\"4\"\n                                 input={displayNameInput}\n                                 helpBlock=\"Name that appears to users\" />);\n    // Style Dropdown Input\n    var styleInput = <DropDownSelect listAPIUrl={this.props.voteTypeContext.voteStyleAPIUrl}\n                                     defaultSelected={this.state.data.style}\n                                     defaultText=\"Select a Voting Style\"\n                                     selectID=\"style\" />;\n    formContents.push(<FormGroup key=\"7\"\n                                 labelSize=\"2\"\n                                 labelContents=\"Voting Style*:\"\n                                 inputSize=\"6\"\n                                 input={styleInput}\n                                 helpBlock='Select a voting style for the Vote Type.'\n                                 docs=\"http://docs.dumpedit.com/en/latest/vote_types.html#vote-styles\" />);\n    // Suggestion Pool Dropdown Input\n    var suggestionPoolInput = <DropDownSelect listAPIUrl={this.props.voteTypeContext.suggestionPoolListAPIUrl}\n                                              defaultSelected={this.state.data.suggestion_pool}\n                                              defaultText=\"Select a Suggestion Pool\"\n                                              selectID=\"suggestion_pool\"\n                                              loadingBarColor=\"#000\" />;\n    formContents.push(<FormGroup key=\"3\"\n                                 labelSize=\"2\"\n                                 labelContents=\"Suggestion Pool:\"\n                                 inputSize=\"6\"\n                                 input={suggestionPoolInput}\n                                 helpBlock=\"Select a Suggestion Pool if the vote type requires suggestions (active suggestion pools only)\"\n                                 docs=\"http://docs.dumpedit.com/en/latest/suggestion_pools.html\" />);\n    // Intervals Input\n    var intervalsInput = <input type=\"text\" id=\"intervals\" name=\"intervals\" defaultValue={this.state.data.intervals} className=\"form-control\"></input>;\n    formContents.push(<FormGroup key=\"5\"\n                                 labelSize=\"2\"\n                                 labelContents=\"Intervals:\"\n                                 inputSize=\"7\"\n                                 input={intervalsInput}\n                                 helpBlock=\"Used to specify minute intervals at which votes are introduced into the show. Must begin with 0. (ex. 0,3,6,8,9,10)\"\n                                 docs=\"http://docs.dumpedit.com/en/latest/vote_types.html#vote-types-interval\" />);\n    // Pre-show Selected Input\n    var preshowSelectedInput = <input type=\"checkbox\" name=\"preshow_selected\" value=\"1\" defaultChecked={this.state.data.preshow_selected}></input>;\n    formContents.push(<FormGroup key=\"4\"\n                                 labelSize=\"2\"\n                                 labelContents=\"Disallow Audience Voting:\"\n                                 inputSize=\"5\"\n                                 input={preshowSelectedInput}\n                                 helpBlock=\"Check this if the winner should be automatically selected instead of allowing the audience to vote\"\n                                 docs=\"http://docs.dumpedit.com/en/latest/vote_types.html#vote-types-disallow-audience-voting\" />);\n    // Manual Interval Control Input\n    var manualIntervalControlInput = <input type=\"checkbox\" name=\"manual_interval_control\" value=\"1\" defaultChecked={this.state.data.manual_interval_control}></input>;\n    formContents.push(<FormGroup key=\"6\"\n                                 labelSize=\"2\"\n                                 labelContents=\"Manual Interval Voting Control:\"\n                                 inputSize=\"5\"\n                                 input={manualIntervalControlInput}\n                                 helpBlock='Check this if you want the \"tech\" to control when interval voting occurs' />);\n    // ordering Input\n    var orderingInput = <input type=\"text\" id=\"ordering\" name=\"ordering\" maxLength=\"2\" defaultValue={this.state.data.ordering} className=\"form-control\"></input>;\n    formContents.push(<FormGroup key=\"8\"\n                                 labelSize=\"2\"\n                                 labelContents=\"Order:\"\n                                 inputSize=\"5\"\n                                 input={orderingInput}\n                                 helpBlock='The numeric order in which the voting types appear, either as buttons on the Show Control page, or otherwise.' />);\n    // options Input\n    var optionsInput = <input type=\"text\" id=\"options\" name=\"options\" maxLength=\"1\" defaultValue={this.state.data.options} className=\"form-control\"></input>;\n    formContents.push(<FormGroup key=\"9\"\n                                 labelSize=\"2\"\n                                 labelContents=\"Voting Options:\"\n                                 inputSize=\"5\"\n                                 input={optionsInput}\n                                 helpBlock='The number of voting options that appear on the voting page. Make sure you choose a number that will fit on the Show Display screen. (Options ignored for player-only vote types)' />);\n    // Vote Length Input\n    var voteLengthInput = <input type=\"text\" id=\"vote_length\" name=\"vote_length\" defaultValue={this.state.data.vote_length} className=\"form-control\"></input>;\n    formContents.push(<FormGroup key=\"10\"\n                                 labelSize=\"2\"\n                                 labelContents=\"Voting Length:\"\n                                 inputSize=\"3\"\n                                 input={voteLengthInput}\n                                 helpBlock='How many seconds the voting period lasts' />);\n    // result Length Input\n    var resultLengthInput = <input type=\"text\" id=\"result_length\" name=\"result_length\" defaultValue={this.state.data.result_length} className=\"form-control\"></input>;\n    formContents.push(<FormGroup key=\"11\"\n                                 labelSize=\"2\"\n                                 labelContents=\"Voted Result Display Length:\"\n                                 inputSize=\"4\"\n                                 input={resultLengthInput}\n                                 helpBlock='How many seconds the results of the vote stays on the screen' />);\n    // Button Color Input\n    var buttonColorInput = <ColorPicker hexColor={this.state.data.button_color}\n                                        inputName=\"button_color\"\n                                        enabled=\"True\" />;\n    formContents.push(<FormGroup key=\"12\"\n                                 labelSize=\"2\"\n                                 labelContents=\"Vote Type Color:\"\n                                 inputSize=\"4\"\n                                 input={buttonColorInput}\n                                 helpBlock='The color designated to the Vote Type buttons and such' />);\n    // Require Login Input (Premium or not)\n    if (this.props.voteTypeContext.isPremium === \"True\") {\n        var requireLoginInput = <input type=\"checkbox\" name=\"require_login\" value=\"1\" defaultChecked={this.state.data.require_login}></input>;\n    } else {\n        var requireLoginInput = <input type=\"checkbox\" name=\"require_login\" value=\"1\" disabled=\"true\"></input>;\n    }\n    formContents.push(<FormGroup key=\"13\"\n                                 labelSize=\"2\"\n                                 labelContents=\"Require Login:\"\n                                 premium=\"true\"\n                                 inputSize=\"5\"\n                                 input={requireLoginInput}\n                                 helpBlock=\"Check this if users are required to login to vote\" />);\n    // Active Input\n    var activeInput = <input type=\"checkbox\" name=\"active\" value=\"1\" defaultChecked={this.state.data.active}></input>;\n    formContents.push(<FormGroup key=\"14\"\n                                 labelSize=\"2\"\n                                 labelContents=\"Vote Type Active:\"\n                                 inputSize=\"5\"\n                                 input={activeInput}\n                                 helpBlock=\"Check this if the Vote Type should appear on the Create Show page\" />);\n    // Submit Button\n    var submitButton = <button type=\"submit\" className=\"btn btn-danger btn-shadow text-shadow\">Create/Edit Vote Type</button>;\n    formContents.push(<FormGroup key=\"15\"\n                                 inputSize=\"2\"\n                                 input={submitButton} />);\n    // Edit Vote Type Dropdown Input\n    var voteTypeEditInput = <DropDownSelect listAPIUrl={this.props.voteTypeContext.voteTypeListAPIUrl}\n                                            selectEventHandler={this.editEventHandler}\n                                            defaultSelected={this.state.voteTypeID}\n                                            defaultText=\"Select a Vote Type to Edit\"\n                                            loadingBarColor=\"#000\" />;\n    formContents.push(<FormGroup key=\"16\"\n                                 labelSize=\"2\"\n                                 labelContents=\"Edit VoteType:\"\n                                 inputSize=\"4\"\n                                 input={voteTypeEditInput}\n                                 helpBlock=\"Select a Vote Type if you wish to edit it\" />);\n\n    var bodyContent = [<Form key=\"form-1\"\n                             formStyle=\"horizontal\"\n                             formSubmitUrl={this.props.voteTypeContext.formSubmitUrl}\n                             formContents={formContents}\n                             onFormSubmit={this.onFormSubmit}\n                             csrfToken={this.props.voteTypeContext.csrfToken} />];\n\n    // If we're editing a vote type, add a delete button\n    if (this.state.voteTypeID) {\n        var deleteContents = [];\n        var message = \"Are you sure you wish to delete the \" + this.state.data.name + \" vote type?\";\n        // Delete Button\n        deleteContents.push(<input key=\"1\" type=\"button\" value=\"DELETE VOTE TYPE\" className=\"btn btn-info btn-shadow text-shadow\" data-toggle=\"modal\" data-target=\"#confirm-delete\" />);\n        deleteContents.push(<input key=\"2\" type=\"hidden\" name=\"delete\" value={this.state.voteTypeID}></input>);\n        deleteContents.push(<ModalConfirm key=\"3\"\n                                          modalID=\"confirm-delete\"\n                                          submitID=\"submit-delete\"\n                                          formID=\"deleteForm\"\n                                          action=\"Delete\"\n                                          dismiss=\"Cancel\"\n                                          header=\"Delete Vote Type\"\n                                          message={message} />);\n        bodyContent.push(<Form key=\"form-2\"\n                               formID=\"deleteForm\"\n                               formSubmitUrl={this.props.voteTypeContext.formSubmitUrl}\n                               formContents={deleteContents}\n                               csrfToken={this.props.voteTypeContext.csrfToken} />);\n    }\n\n    return (\n        <div key={this.state.key}>\n            <FormLabel action={this.props.voteTypeContext.action}\n                       error={this.props.voteTypeContext.error} />\n            <Panel panelWidth=\"6\" panelOffset=\"3\" panelColor=\"info\"\n                   panelHeadingContent=\"Create/Edit Vote Types\" panelHeadingClasses=\"x-large-font\"\n                   panelBodyClasses=\"white-background\"\n                   panelHeadingLink=\"http://docs.dumpedit.com/en/latest/vote_types.html\"\n                   bodyContent={bodyContent} />\n        </div>\n    );\n  }\n});\n\n\nvar ChannelShowForm = React.createClass({\n  getInitialState: function() {\n    return {data: {show_length: 180,\n                   embedded_youtube: \"\"},\n            showID: undefined,\n            key: \"0\"};\n  },\n  componentDidMount: function() {\n    // If a show has been selected\n    if (this.state.showID) {\n        var showAPIUrl = this.props.channelShowContext.showAPIUrl + this.state.showID + \"/\";\n        $.ajax({\n          url: showAPIUrl,\n          dataType: 'json',\n          success: function(data) {\n            this.setState({data: data,\n                           showID: this.state.showID,\n                           key: this.state.showID});\n          }.bind(this),\n          error: function(xhr, status, err) {\n            console.error(this.props.url, status, err.toString());\n          }.bind(this)\n        });\n    }\n  },\n  onFormSubmit: function(event) {\n      limitFileSize(event, 'photoFile', \"Show Photo File\");\n      validateTextField(event, \"show_length\", \"Show Display Length\", false, \"Show length in minutes is required.\");\n      validateYoutubeField(event, \"embedded_youtube\", \"Youtube Url\");\n  },\n  editEventHandler: function(event) {\n      this.setState({showID: event.target.value}, function() {\n          this.componentDidMount();\n      });\n  },\n  render: function() {\n    var formContents = [];\n    var bodyContent = [];\n    // Premium features key\n    formContents.push(<div key=\"premium-1\" className=\"row\"><div className=\"col-md-12\"><StarImage /> = Premium Feature</div><br /><br /></div>);\n    // Only change players and vote types during creation\n    if (!this.state.showID) {\n        // Vote Types Dropdown Input\n        var voteTypesInput = <DropDownSelect listAPIUrl={this.props.channelShowContext.voteTypeListAPIUrl}\n                                             selectID=\"vote_types\"\n                                             multiple=\"true\"\n                                             loadingBarColor=\"#000\" />;\n        formContents.push(<FormGroup key=\"1\"\n                                     labelSize=\"2\"\n                                     labelContents=\"Vote Types:\"\n                                     inputSize=\"6\"\n                                     input={voteTypesInput}\n                                     helpBlock='Select Vote Types for the Show (active only)' />);\n        // Players Dropdown Input\n        var playersInput = <DropDownSelect listAPIUrl={this.props.channelShowContext.playerListAPIUrl}\n                                           selectID=\"players\"\n                                           multiple=\"true\"\n                                           loadingBarColor=\"#000\" />;\n        formContents.push(<FormGroup key=\"2\"\n                                     labelSize=\"2\"\n                                     labelContents=\"Players:\"\n                                     inputSize=\"6\"\n                                     input={playersInput}\n                                     helpBlock='Select Players for the Show (active only)' />);\n    }\n\n    // Show Length Input\n    var showLengthInput = <input type=\"text\" id=\"show_length\" name=\"show_length\" defaultValue={this.state.data.show_length} className=\"form-control\"></input>;\n    formContents.push(<FormGroup key=\"3\"\n                                 labelSize=\"2\"\n                                 labelContents=\"Show Display Length (minutes)*:\"\n                                 inputSize=\"6\"\n                                 input={showLengthInput}\n                                 helpBlock=\"Length of the show display from creation until end in minutes (should be a large overestimate of minutes, not exact), required for knowing when the show display should end and channel functionality should return to normal.\"\n                                 docs=\"http://docs.dumpedit.com/en/latest/shows.html#show-length\" />);\n\n    // Photo Link Input (Premium or Not)\n    if (this.props.channelShowContext.isPremium === \"True\") {\n        var photoLinkInput = <div><span className=\"btn btn-primary btn-file\"><input id=\"photoFile\" type=\"file\" name=\"photoFile\"></input></span><Image image_url={this.state.data.photo_link} /></div>;\n    } else {\n        var photoLinkInput = <div><span className=\"btn btn-primary btn-file\"><input id=\"photoFile\" type=\"file\" name=\"photoFile\" disabled=\"true\"></input></span><Image image_url={this.state.data.photo_link} /></div>;\n    }\n    formContents.push(<FormGroup key=\"4\"\n                                 labelSize=\"2\"\n                                 labelContents=\"Show Photo:\"\n                                 inputSize=\"6\"\n                                 premium=\"true\"\n                                 input={photoLinkInput}\n                                 helpBlock=\"Photo from the show (can be added later), must be smaller than 2MB\" />);\n\n    // Youtube Input (Premium or Not)\n    if (this.props.channelShowContext.isPremium === \"True\") {\n        var youtubeInput = <input type=\"text\" id=\"embedded_youtube\" name=\"embedded_youtube\" defaultValue={this.state.data.embedded_youtube} className=\"form-control\"></input>;\n    } else {\n        var youtubeInput = <input type=\"text\" id=\"embedded_youtube\" name=\"embedded_youtube\" disabled=\"true\" defaultValue={this.state.data.embedded_youtube} className=\"form-control\"></input>;\n    }\n    formContents.push(<FormGroup key=\"5\"\n                                 labelSize=\"2\"\n                                 labelContents=\"Youtube Url:\"\n                                 inputSize=\"6\"\n                                 premium=\"true\"\n                                 input={youtubeInput}\n                                 helpBlock=\"Youtube video from the show (can be added later), must be a valid Youtube url\" />);\n\n    // Submit Button\n    var submitButton = <button type=\"submit\" className=\"btn btn-danger btn-shadow text-shadow\">Create/Edit Show</button>;\n    formContents.push(<FormGroup key=\"6\"\n                                 inputSize=\"2\"\n                                 input={submitButton} />);\n    // Edit Show Dropdown Input\n    var showEditInput = <DropDownSelect listAPIUrl={this.props.channelShowContext.showListAPIUrl}\n                                        selectEventHandler={this.editEventHandler}\n                                        defaultSelected={this.state.showID}\n                                        defaultText=\"Select a Show to Edit\"\n                                        loadingBarColor=\"#000\"\n                                        convertCreatedTimestamp=\"True\" />;\n    formContents.push(<FormGroup key=\"7\"\n                                 labelSize=\"2\"\n                                 labelContents=\"Edit Show:\"\n                                 inputSize=\"4\"\n                                 input={showEditInput}\n                                 helpBlock=\"Select a Show if you wish to edit it\" />);\n\n    bodyContent.push(<Form key=\"1\"\n                           formStyle=\"horizontal\"\n                           formSubmitUrl={this.props.channelShowContext.formSubmitUrl}\n                           formContents={formContents}\n                           onFormSubmit={this.onFormSubmit}\n                           csrfToken={this.props.channelShowContext.csrfToken} />);\n    // If a show id has been selected. Add a delete button\n    if (this.state.showID) {\n        var deleteContents = [];\n        var message = \"Are you sure you wish to delete the \" + showDateUTCToLocalFormat(this.state.data.created) + \" show?\";\n        // Delete Button\n        deleteContents.push(<input key=\"1\" type=\"button\" value=\"DELETE SHOW\" className=\"btn btn-info btn-shadow text-shadow\" data-toggle=\"modal\" data-target=\"#confirm-delete\" />);\n        deleteContents.push(<input key=\"2\" type=\"hidden\" name=\"delete\" value={this.state.showID}></input>);\n        deleteContents.push(<ModalConfirm key=\"3\"\n                                          modalID=\"confirm-delete\"\n                                          submitID=\"submit-delete\"\n                                          formID=\"deleteForm\"\n                                          action=\"Delete\"\n                                          dismiss=\"Cancel\"\n                                          header=\"Delete Show\"\n                                          message={message} />);\n        bodyContent.push(<Form key=\"2\"\n                               formID=\"deleteForm\"\n                               formSubmitUrl={this.props.channelShowContext.formSubmitUrl}\n                               formContents={deleteContents}\n                               csrfToken={this.props.channelShowContext.csrfToken} />);\n    }\n    return (\n        <div key={this.state.key}>\n            <FormLabel action={this.props.channelShowContext.action}\n                       error={this.props.channelShowContext.error} />\n            <Panel panelWidth=\"6\" panelOffset=\"3\" panelColor=\"info\"\n                   panelHeadingContent=\"Create/Edit/Delete Shows\" panelHeadingClasses=\"x-large-font\"\n                   panelBodyClasses=\"white-background\"\n                   panelHeadingLink=\"http://docs.dumpedit.com/en/latest/shows.html\"\n                   bodyContent={bodyContent} />\n        </div>\n    );\n  }\n});\n\n\nvar ChannelLeaderboardSpanForm = React.createClass({\n  getInitialState: function() {\n    return {data: {name: \"\",\n                   start_date: \"\",\n                   end_date: \"\"},\n            spanID: undefined,\n            key: \"0\"};\n  },\n  componentDidMount: function() {\n    // If a span has been selected\n    if (this.state.spanID) {\n        var leaderboardSpanAPIUrl = this.props.channelLeaderboardSpanContext.leaderboardSpanAPIUrl + this.state.spanID + \"/\";\n        $.ajax({\n          url: leaderboardSpanAPIUrl,\n          dataType: 'json',\n          success: function(data) {\n            this.setState({data: data,\n                           spanID: this.state.spanID,\n                           key: this.state.spanID});\n          }.bind(this),\n          error: function(xhr, status, err) {\n            console.error(this.props.url, status, err.toString());\n          }.bind(this)\n        });\n    }\n    $('#start-picker').datetimepicker({\n        format: 'YYYY-MM-DD'\n    });\n    $('#end-picker').datetimepicker({\n        format: 'YYYY-MM-DD'\n    });\n  },\n  componentDidUpdate: function(prev, next) {\n    $('#start-picker').datetimepicker({\n        format: 'YYYY-MM-DD'\n    });\n    $('#end-picker').datetimepicker({\n        format: 'YYYY-MM-DD'\n    });\n  },\n  editEventHandler: function(event) {\n      this.setState({spanID: event.target.value}, function() {\n          this.componentDidMount();\n      });\n  },\n  render: function() {\n    var formContents = [];\n    var listAPIUrl = this.props.channelLeaderboardSpanContext.leaderboardSpanAPIUrl + \"?channel_id=\" + this.props.channelLeaderboardSpanContext.channelID;\n\n    // Name Input\n    var nameInput = <input type=\"text\" id=\"name\" name=\"name\" defaultValue={this.state.data.name} className=\"form-control\"></input>;\n    formContents.push(<FormGroup key=\"1\"\n                                 labelSize=\"2\"\n                                 labelContents=\"Custom Span Name:\"\n                                 inputSize=\"4\"\n                                 input={nameInput}\n                                 helpBlock=\"Appears on the Leaderboard page\" />);\n\n    // Span Start\n    var startInput = (\n        <div className='input-group date' id='start-picker'>\n            <input type=\"text\" name=\"start\" className=\"form-control\" defaultValue={this.state.data.start_date}></input>\n            <span className=\"input-group-addon bg-info\">\n                <span className=\"glyphicon glyphicon-calendar\"></span>\n            </span>\n        </div>\n    );\n    formContents.push(<FormGroup key=\"2\"\n                                 labelSize=\"2\"\n                                 labelContents=\"Span Start Date:\"\n                                 inputSize=\"5\"\n                                 input={startInput}\n                                 helpBlock=\"When the custom leaderboard span starts\" />);\n\n    // Span End\n    var endInput = (\n        <div className='input-group date' id='end-picker'>\n            <input type=\"text\" name=\"end\" className=\"form-control\" defaultValue={this.state.data.end_date}></input>\n            <span className=\"input-group-addon bg-info\">\n                <span className=\"glyphicon glyphicon-calendar\"></span>\n            </span>\n        </div>\n    );\n    formContents.push(<FormGroup key=\"3\"\n                                 labelSize=\"2\"\n                                 labelContents=\"Span End Date:\"\n                                 inputSize=\"5\"\n                                 input={endInput}\n                                 helpBlock=\"When the custom leaderboard span ends\" />);\n\n    // Submit Button\n    var submitButton = <button type=\"submit\" className=\"btn btn-danger btn-shadow text-shadow\">Create/Edit Leaderboard Span</button>;\n    formContents.push(<FormGroup key=\"4\"\n                                 inputSize=\"2\"\n                                 input={submitButton} />);\n    // Edit Span Dropdown Input\n    var spanEditInput = <DropDownSelect listAPIUrl={listAPIUrl}\n                                        selectEventHandler={this.editEventHandler}\n                                        selectID=\"spanID\"\n                                        defaultSelected={this.state.spanID}\n                                        defaultText=\"Select a Leaderboard Span to Edit\"\n                                        loadingBarColor=\"#000\" />;\n    formContents.push(<FormGroup key=\"5\"\n                                 labelSize=\"2\"\n                                 labelContents=\"Edit Leaderboard Span:\"\n                                 inputSize=\"5\"\n                                 input={spanEditInput}\n                                 helpBlock=\"Select a leaderboard span if you wish to edit it\" />);\n\n    var bodyContent = [<Form key=\"form-1\"\n                             formStyle=\"horizontal\"\n                             formSubmitUrl={this.props.channelLeaderboardSpanContext.formSubmitUrl}\n                             formContents={formContents}\n                             onFormSubmit={this.onFormSubmit}\n                             csrfToken={this.props.channelLeaderboardSpanContext.csrfToken} />];\n\n    // If we're editing a span, add a delete button\n    if (this.state.spanID) {\n        var deleteContents = [];\n        var message = \"Are you sure you wish to delete the \" + this.state.data.name + \" leaderboard span?\";\n        // Delete Button\n        deleteContents.push(<input key=\"1\" type=\"button\" value=\"DELETE LEADERBOARD SPAN\" className=\"btn btn-info btn-shadow text-shadow\" data-toggle=\"modal\" data-target=\"#confirm-delete\" />);\n        deleteContents.push(<input key=\"2\" type=\"hidden\" name=\"delete\" value={this.state.spanID}></input>);\n        deleteContents.push(<ModalConfirm key=\"3\"\n                                          modalID=\"confirm-delete\"\n                                          submitID=\"submit-delete\"\n                                          formID=\"deleteForm\"\n                                          action=\"Delete\"\n                                          dismiss=\"Cancel\"\n                                          header=\"Delete Leaderboard Span\"\n                                          message={message} />);\n        bodyContent.push(<Form key=\"form-2\"\n                               formID=\"deleteForm\"\n                               formSubmitUrl={this.props.channelLeaderboardSpanContext.formSubmitUrl}\n                               formContents={deleteContents}\n                               csrfToken={this.props.channelLeaderboardSpanContext.csrfToken} />);\n    }\n\n    return (\n        <div key={this.state.key}>\n            <FormLabel action={this.props.channelLeaderboardSpanContext.action}\n                       error={this.props.channelLeaderboardSpanContext.error} />\n            <Panel panelWidth=\"6\" panelOffset=\"3\" panelColor=\"info\"\n                   panelHeadingContent=\"Create/Edit Custom Leaderboard Span\" panelHeadingClasses=\"x-large-font\"\n                   panelBodyClasses=\"white-background\"\n                   panelHeadingLink=\"http://docs.dumpedit.com/en/latest/leaderboards.html\"\n                   bodyContent={bodyContent} />\n        </div>\n    );\n  }\n});\n\n///////////////////////////////////////////////////////////////////////////////////////////\n////////////////////////////////// LEADERBOARD COMPONENTS ////////////////////////////////\n///////////////////////////////////////////////////////////////////////////////////////////\n\nvar MedalButtonForm = React.createClass({\n  render: function() {\n    var medalActionLink = this.props.baseLinkUrl + 'show/' + this.props.showID + '/';\n    var awardMedalInput = <div>\n                            <input type=\"hidden\" name=\"award_medals\" value=\"True\"></input>\n                            <input type=\"submit\" className=\"btn btn-warning btn-block btn-lg x-large-font btn-shadow text-shadow\" value=\"Award Medals\"></input>\n                          </div>;\n    var formContents = <FormGroup input={awardMedalInput} />\n    return (\n        <div className=\"col-md-offset-5 col-md-2\">\n            <br />\n            <Form formStyle=\"inline\"\n                  formSubmitUrl={medalActionLink}\n                  formContents={formContents}\n                  csrfToken={this.props.csrfToken} />\n        </div>\n    );\n  }\n});\n\n\nvar ChannelLeaderboardTable = React.createClass({\n  getInitialState: function() {\n    return {data: undefined};\n  },\n  componentDidMount: function() {\n    $.ajax({\n      url: this.props.leaderboardContext.channelLeaderboardAPIUrl,\n      dataType: 'json',\n      success: function(data) {\n        this.setState({data: data});\n      }.bind(this),\n      error: function(xhr, status, err) {\n        console.error(this.props.url, status, err.toString());\n      }.bind(this)\n    });\n  },\n  render: function() {\n    if (!this.state.data){\n        return (<div className=\"table-responsive text-shadow\">\n                    <table className=\"table table-condensed large-font\">\n                        <thead>\n                            <tr className=\"medium-background\">\n                                <th>Rank</th>\n                                <th>Username</th>\n                                <th>Suggestion Wins</th>\n                                <th>Points</th>\n                                <th>Show Wins</th>\n                            </tr>\n                        </thead>\n                        <tbody><tr><td colSpan=\"5\">\n                            <Loading loadingBarColor=\"#fff\"/>\n                        </td></tr></tbody>\n                    </table>\n                </div>);\n    }\n    var tableList = [];\n    this.counter = 0;\n    this.startCount = this.props.leaderboardContext.maxPerPage * (this.props.leaderboardContext.page - 1);\n\n    // Create the suggestion list\n    this.state.data.map(function (leaderboardUser) {\n        this.counter++;\n        var rank = this.counter + this.startCount;\n        var userUrl = this.props.leaderboardContext.usersUrl + leaderboardUser.user_id + \"/?channel_name=\" + this.props.leaderboardContext.channelName;\n        tableList.push(<tr key={this.counter} className=\"light-background\">\n                            <td>{rank}</td>\n                            <td><a href={userUrl}>{leaderboardUser.username}</a></td>\n                            <td>{leaderboardUser.suggestion_wins}</td>\n                            <td>{leaderboardUser.points}</td>\n                            <td>{leaderboardUser.show_wins}</td>\n                       </tr>);\n        return tableList;\n    }, this);\n    return (\n        <div className=\"table-responsive text-shadow\">\n            <table className=\"table table-condensed large-font\">\n                <thead>\n                    <tr className=\"medium-background\">\n                        <th>Rank</th>\n                        <th>Username</th>\n                        <th>Suggestion Wins</th>\n                        <th>Points</th>\n                        <th>Show Wins</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {tableList}\n                </tbody>\n            </table>\n            <Pagination maxPages={this.props.leaderboardContext.maxPages}\n                        currentPage={this.props.leaderboardContext.page} />\n        </div>\n    );\n  }\n});\n\nvar SpanLeaderboardTable = React.createClass({\n  getInitialState: function() {\n    return {data: undefined};\n  },\n  componentDidMount: function() {\n    $.ajax({\n      url: this.props.leaderboardContext.leaderboardEntrySpanAPIUrl,\n      dataType: 'json',\n      success: function(data) {\n        this.setState({data: data});\n      }.bind(this),\n      error: function(xhr, status, err) {\n        console.error(this.props.url, status, err.toString());\n      }.bind(this)\n    });\n  },\n  render: function() {\n    if (!this.state.data){\n        return (<div className=\"table-responsive text-shadow\">\n                    <table className=\"table table-condensed large-font\">\n                        <thead>\n                            <tr className=\"medium-background\">\n                                <th>Rank</th>\n                                <th>Username</th>\n                                <th>Show Wins</th>\n                                <th>Suggestion Wins</th>\n                                <th>Points</th>\n                            </tr>\n                        </thead>\n                        <tbody><tr><td colSpan=\"5\">\n                            <Loading loadingBarColor=\"#fff\"/>\n                        </td></tr></tbody>\n                    </table>\n                    <Pagination maxPages={this.props.leaderboardContext.maxPages}\n                                currentPage={this.props.leaderboardContext.page} />\n                </div>);\n    }\n    var tableList = [];\n    this.counter = 0;\n    this.startCount = this.props.leaderboardContext.maxPerPage * (this.props.leaderboardContext.page - 1);\n\n    // Create the suggestion list\n    this.state.data.map(function (leaderboardUser) {\n        this.counter++;\n        var rank = this.counter + this.startCount;\n        var userUrl = this.props.leaderboardContext.usersUrl + leaderboardUser.user_id + \"/?channel_name=\" + this.props.leaderboardContext.channelName;\n        tableList.push(<tr key={this.counter} className=\"light-background\">\n                            <td>{rank}</td>\n                            <td><a href={userUrl}>{leaderboardUser.username}</a></td>\n                            <td>{leaderboardUser.show_wins}</td>\n                            <td>{leaderboardUser.suggestion_wins}</td>\n                            <td>{leaderboardUser.points}</td>\n                       </tr>);\n        return tableList;\n    }, this);\n    return (\n        <div className=\"table-responsive text-shadow\">\n            <br/>\n            <table className=\"table table-condensed large-font\">\n                <thead>\n                    <tr className=\"medium-background\">\n                        <th>Rank</th>\n                        <th>Username</th>\n                        <th>Show Wins</th>\n                        <th>Suggestion Wins</th>\n                        <th>Points</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {tableList}\n                </tbody>\n            </table>\n            <Pagination maxPages={this.props.leaderboardContext.maxPages}\n                        currentPage={this.props.leaderboardContext.page} />\n        </div>\n    );\n  }\n});\n\nvar ShowLeaderboardTable = React.createClass({\n  getInitialState: function() {\n    return {data: undefined};\n  },\n  componentDidMount: function() {\n    $.ajax({\n      url: this.props.leaderboardContext.leaderboardEntryAPIUrl,\n      dataType: 'json',\n      success: function(data) {\n        this.setState({data: data});\n      }.bind(this),\n      error: function(xhr, status, err) {\n        console.error(this.props.url, status, err.toString());\n      }.bind(this)\n    });\n  },\n  render: function() {\n    if (!this.state.data){\n        return (<div className=\"table-responsive text-shadow\">\n                    <table className=\"table table-condensed large-font\">\n                        <thead>\n                            <tr className=\"medium-background\">\n                                <th>Rank</th>\n                                <th>Username</th>\n                                <th>Suggestions</th>\n                                <th>Suggestion Wins</th>\n                                <th>Points</th>\n                                <th>Medals</th>\n                            </tr>\n                        </thead>\n                        <tbody><tr><td colSpan=\"5\">\n                            <Loading loadingBarColor=\"#fff\"/>\n                        </td></tr></tbody>\n                    </table>\n                    <Pagination maxPages={this.props.leaderboardContext.maxPages}\n                                currentPage={this.props.leaderboardContext.page} />\n                </div>);\n    }\n    var tableList = [];\n    this.counter = 0;\n    this.startCount = this.props.leaderboardContext.maxPerPage * (this.props.leaderboardContext.page - 1);\n\n    // Create the suggestion list\n    this.state.data.map(function (leaderboardUser) {\n        this.counter++;\n        var rank = this.counter + this.startCount;\n        var userUrl = this.props.leaderboardContext.usersUrl + leaderboardUser.user_id + \"/?channel_name=\" + this.props.leaderboardContext.channelName;\n        var medalList = [];\n        // Go through all the medal keys\n        for (var i = 0; i < leaderboardUser.medals.length; i++) {\n            var medalID = leaderboardUser.medals[i];\n            medalList.push(<Medal key={i}\n                                  medalID={medalID}\n                                  medalsUrl={this.props.leaderboardContext.medalsUrl}\n                                  medalListAPIUrl={this.props.leaderboardContext.medalListAPIUrl} />);\n        }\n        tableList.push(<tr key={this.counter} className=\"light-background\">\n                            <td>{rank}</td>\n                            <td><a href={userUrl}>{leaderboardUser.username}</a></td>\n                            <td>{leaderboardUser.suggestions}</td>\n                            <td>{leaderboardUser.wins}</td>\n                            <td>{leaderboardUser.points}</td>\n                            <td>{medalList}</td>\n                       </tr>);\n        return tableList;\n    }, this);\n    return (\n        <div className=\"table-responsive text-shadow\">\n            <br/>\n            <table className=\"table table-condensed large-font\">\n                <thead>\n                    <tr className=\"medium-background\">\n                        <th>Rank</th>\n                        <th>Username</th>\n                        <th>Suggestions</th>\n                        <th>Suggestion Wins</th>\n                        <th>Points</th>\n                        <th>Medals</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {tableList}\n                </tbody>\n            </table>\n        </div>\n    );\n  }\n});\n\nvar Leaderboard = React.createClass({\n  render: function() {\n    var leaderboardComponents = [];\n    var showID = this.props.leaderboardContext.showID;\n\n    // If a show was selected or a leaderboard span\n    if (showID || this.props.leaderboardContext.start) {\n        leaderboardComponents.push(<BigButtonDropdown key=\"1\"\n                                            buttonColor=\"primary\"\n                                            leaderboardContext={this.props.leaderboardContext}\n                                            showAPIUrl={this.props.leaderboardContext.showListAPIUrl}\n                                            baseLinkUrl={this.props.leaderboardContext.channelLeaderboardUrl}\n                                            showID={this.props.leaderboardContext.showID}\n                                            currentSelection={this.props.leaderboardContext.currentSelection} />);\n        leaderboardComponents.push(<br key=\"2\" />);\n        // If it's a show\n        if (showID) {\n            leaderboardComponents.push(<BigButton key=\"3\"\n                                        buttonText=\"View Show Recap\"\n                                        buttonColor=\"danger\"\n                                        buttonLink={this.props.leaderboardContext.channelShowRecapUrl} />);\n            // If this is a channel admin user and we haven't awarded medals\n            if (this.props.leaderboardContext.isAdmin === \"True\" && this.props.leaderboardContext.medalsAwarded === \"False\") {\n                leaderboardComponents.push(<MedalButtonForm key=\"4\"\n                                                            baseLinkUrl={this.props.leaderboardContext.channelLeaderboardUrl}\n                                                            showID={this.props.leaderboardContext.showID}\n                                                            csrfToken={this.props.leaderboardContext.csrfToken} />);\n            }\n            leaderboardComponents.push(<div key=\"5\" className=\"row\"><div className=\"col-md-10 col-md-offset-1\">\n                                 <ShowLeaderboardTable leaderboardContext={this.props.leaderboardContext}\n                                                          showID={this.props.leaderboardContext.showID} />\n                             </div></div>);\n        // Otherwise if it's a date span\n        } else if (this.props.leaderboardContext.start) {\n            leaderboardComponents.push(<div key=\"5\" className=\"row\"><div className=\"col-md-10 col-md-offset-1\">\n                                 <SpanLeaderboardTable leaderboardContext={this.props.leaderboardContext} />\n                             </div></div>);\n        }\n    }\n    else if (this.props.leaderboardContext.channelID) {\n        leaderboardComponents.push(<BigButtonDropdown key=\"1\"\n                                            buttonColor=\"primary\"\n                                            leaderboardContext={this.props.leaderboardContext}\n                                            showAPIUrl={this.props.leaderboardContext.showListAPIUrl}\n                                            baseLinkUrl={this.props.leaderboardContext.channelLeaderboardUrl}\n                                            currentSelection={this.props.leaderboardContext.currentSelection} />);\n        leaderboardComponents.push(<div key=\"2\" className=\"row\"><div className=\"col-md-10 col-md-offset-1\">\n                                 <br/>\n                                 <ChannelLeaderboardTable leaderboardContext={this.props.leaderboardContext} />\n                             </div></div>);\n    }\n\n    return (\n      <div>{leaderboardComponents}</div>\n    );\n  }\n});\n\n///////////////////////////////////////////////////////////////////////////////////////////\n////////////////////////////////// USER ACCOUNT COMPONENTS ////////////////////////////////\n///////////////////////////////////////////////////////////////////////////////////////////\n\nvar MedalRows = React.createClass({\n  render: function() {\n    var arrayLength = this.props.medals.length;\n    var rowList = [];\n    var medalList = [];\n    // Go through all the medal keys\n    for (var i = 0; i < arrayLength; i++) {\n        var medalID = this.props.medals[i];\n        medalList.push(<Medal key={i}\n                              medalID={medalID}\n                              medalsUrl={this.props.userAccountContext.medalsUrl}\n                              medalListAPIUrl={this.props.userAccountContext.medalListAPIUrl} />);\n        var currentNum = i+1;\n        // Push the row and reset the current medal list every 5 medals\n        if (currentNum % 5 == 0) {\n            rowList.push(<span key={currentNum} className=\"row\">{medalList}</span>);\n            medalList = [];\n        }\n    }\n    // If there are any remaining medals, form a remainder row\n    if (medalList) {\n        rowList.push(<span key=\"1\" className=\"row\">{medalList}</span>);\n    }\n    return (\n        <span>{rowList}</span>\n    );\n  }\n});\n\nvar UserStatsTableBody = React.createClass({\n  getInitialState: function() {\n    return {data: undefined};\n  },\n  componentDidMount: function() {\n    $.ajax({\n      url: this.props.userAccountContext.userStatsAPIUrl,\n      dataType: 'json',\n      success: function(data) {\n        this.setState({data: data});\n      }.bind(this),\n      error: function(xhr, status, err) {\n        console.error(this.props.url, status, err.toString());\n      }.bind(this)\n    });\n  },\n  render: function() {\n    if (!this.state.data){\n        return (<div className=\"table-responsive\">\n                    <table className=\"table table-condensed black-font\">\n                        <tbody><tr><td><Loading /></td></tr></tbody>\n                    </table>\n                </div>);\n    }\n    // Decide the stat column color\n    var columnColor = \"info\";\n    // Define classes\n    var tdClasses = 'table-column large-font ' + columnColor;\n    var trClasses = 'spacing';\n    // Create the user stats\n    var statsList = [];\n    var medalShare;\n    // Share medals on Facebook\n    if (this.props.userAccountContext.userProfileID == this.props.userAccountContext.requestUserID) {\n        // var imgSrc = this.props.userAccountContext.imageBaseUrl + \"facebook_share.png\";\n        // medalShare = <img className=\"facebook-share\" src={imgSrc} />;\n    }\n    statsList.push(<tr key=\"1\" className={trClasses}><td className={tdClasses}>Username: {this.state.data.username}</td></tr>);\n    statsList.push(<tr key=\"2\" className={trClasses}><td className={tdClasses}>Suggestions: {this.state.data.suggestions}</td></tr>);\n    statsList.push(<tr key=\"3\" className={trClasses}><td className={tdClasses}>Suggestion Wins: {this.state.data.wins}</td></tr>);\n    statsList.push(<tr key=\"4\" className={trClasses}><td className={tdClasses}>Points: {this.state.data.points}</td></tr>);\n    // If they have medals\n    if (this.state.data.medals.length) {\n        statsList.push(<tr key=\"5\" className={trClasses}><td>\n                    <span className=\"reset-this\">Medals:</span><br/>\n                    <MedalRows medals={this.state.data.medals}\n                               userAccountContext={this.props.userAccountContext} />\n                    {medalShare}\n                 </td></tr>);\n    }\n\n    return (\n        <div className=\"table-responsive text-shadow\">\n            <table className=\"table table-condensed black-font\">\n                <tbody>\n                    {statsList}\n                </tbody>\n            </table>\n        </div>\n    );\n  }\n});\n\nvar UserShowStats = React.createClass({\n  getInitialState: function() {\n    return {data: undefined};\n  },\n  componentDidMount: function() {\n    // Get the leaderboard stats for the user\n    var showStatsUrl = this.props.userAccountContext.showListAPIUrl + this.props.showStats.show + \"/\";\n    $.ajax({\n      url: showStatsUrl,\n      dataType: 'json',\n      success: function(data) {\n        this.setState({data: data});\n      }.bind(this),\n      error: function(xhr, status, err) {\n        console.error(this.props.url, status, err.toString());\n      }.bind(this)\n    });\n  },\n  render: function() {\n    if (!this.state.data){\n        return (<Loading />);\n    }\n    var showDateFormatted = showDateUTCToLocalFormat(this.state.data.created);\n    var heading = showDateFormatted + \" Show\";\n    var bodyContent = <UserShowStatsPanelBody showStats={this.props.showStats}\n                                              userAccountContext={this.props.userAccountContext} />;\n    return (\n      <Panel panelWidth=\"12\" panelColor=\"primary\"\n             panelHeadingContent={heading} panelHeadingClasses=\"x-large-font\"\n             panelBodyClasses=\"large-font black-font\"\n             tableClasses=\"table-condensed black-font\"\n             bodyContent={bodyContent} />\n    );\n  }\n});\n\nvar UserShowStatsPanelBody = React.createClass({\n  render: function() {\n    var statElements = [];\n    // Create the user show stats (make sure the state is loaded first)\n    if (this.props.showStats) {\n        var showID = this.props.showStats.show;\n        var showLink = \"/\" + this.props.showStats.channel_name + \"/leaderboards/show/\" + showID + \"/\";\n        var recapLink = \"/\" + this.props.showStats.channel_name + \"/recaps/show/\" + showID + \"/\";\n        statElements.push(<div key=\"1\" className=\"row\"><div className=\"col-md-12\">Points Earned: {this.props.showStats.points}</div></div>);\n        statElements.push(<div key=\"2\" className=\"row\"><div className=\"col-md-12\">Winning Suggestions: {this.props.showStats.wins}</div></div>);\n        statElements.push(<div key=\"3\" className=\"row\"><div className=\"col-md-12\"><a href={showLink}>Show Leaderboard</a></div></div>);\n        statElements.push(<div key=\"4\" className=\"row\"><div className=\"col-md-12\"><a href={recapLink}>Show Recap</a></div></div>);\n        statElements.push(<div key=\"5\" className=\"row\"><div className=\"col-md-12\">Suggestions:</div></div>);\n        statElements.push(<UserShowStatsTableBody key=\"6\"\n                                                  userAccountContext={this.props.userAccountContext}\n                                                  showID={showID}\n                                                  showStats={this.props.showStats} />);\n        statElements.push(<div key=\"7\" className=\"row\"><div className=\"col-md-12\"><StarImage /> = Winning Suggestion</div></div>);\n        statElements.push(<div key=\"8\" className=\"row\"><div className=\"col-md-12\"><Label labelColor=\"info\" labelContents=\"&nbsp;&nbsp;\" /> = Appeared in Voting</div></div>);\n        statElements.push(<div key=\"9\" className=\"row\"><div className=\"col-md-12\"><Label labelColor=\"info\" extraClasses=\"light-gray-bg\" labelContents=\"&nbsp;&nbsp;\" /> = Not Voted on</div></div>);\n    }\n\n    return (\n        <div>{statElements}</div>\n    );\n  }\n});\n\n\nvar UserShowStatsTableBody = React.createClass({\n  getInitialState: function() {\n    return {data: undefined};\n  },\n  componentDidMount: function() {\n    // Get the suggestions for the user\n    var userSuggestionsUrl = this.props.userAccountContext.suggestionListAPIUrl + \"?user_id=\" + this.props.userAccountContext.userProfileID + \"&show_id=\" + this.props.showID;\n    $.ajax({\n      url: userSuggestionsUrl,\n      dataType: 'json',\n      success: function(data) {\n        this.setState({data: data});\n      }.bind(this),\n      error: function(xhr, status, err) {\n        console.error(this.props.url, status, err.toString());\n      }.bind(this)\n    });\n  },\n  render: function() {\n    if (!this.state.data){\n        return (<div className=\"table-responsive\">\n                    <table className=\"table table-condensed black-font\">\n                        <tbody><tr><td><Loading /></td></tr></tbody>\n                    </table>\n                </div>);\n    }\n    var suggestionList = [];\n    this.counter = 0;\n    // Create the suggestion list\n    this.state.data.map(function (suggestion) {\n        this.counter++;\n        var suggestionClass, starIMG, suggestionDisplay;\n        // Used a different class if the suggestion won\n        if (suggestion.used === true) {\n            suggestionClass = \"success\";\n        } else if (suggestion.voted_on === true) {\n            suggestionClass = \"info\";\n        } else {\n            suggestionClass = \"active\";\n        }\n        // If the suggestion was used during the show\n        if (suggestion.used === true) {\n            suggestionDisplay = <td className={suggestionClass}><span className=\"text-shadow\">{suggestion.value}</span><StarImage /></td>;\n        } else {\n            suggestionDisplay = <td className={suggestionClass}>{suggestion.value}</td>;\n        }\n        suggestionList.push(<tr key={this.counter}>{suggestionDisplay}</tr>);\n        return suggestionList;\n    }, this);\n    return (\n        <div className=\"table-responsive\">\n            <table className=\"table table-condensed black-font\">\n                <tbody>{suggestionList}</tbody>\n            </table>\n        </div>\n    );\n  }\n});\n\n\nvar UserStats = React.createClass({\n  getInitialState: function() {\n    return {data: undefined};\n  },\n  componentDidMount: function() {\n    // Get the leaderboard stats for the user\n    var leaderboardStatsAPIUrl = this.props.userAccountContext.leaderboardStatsAPIUrl;\n    $.ajax({\n      url: leaderboardStatsAPIUrl,\n      dataType: 'json',\n      success: function(data) {\n        this.setState({data: data});\n      }.bind(this),\n      error: function(xhr, status, err) {\n        console.error(this.props.url, status, err.toString());\n      }.bind(this)\n    });\n  },\n  onFormSubmit: function(event) {\n      validateTextField(event, \"username-input\", \"Username\", true);\n  },\n  render: function() {\n    var showList;\n    var usernameTab;\n    var usernameTabContents;\n    if (!this.state.data) {\n        return (\n            <div className=\"row\">\n                <div className=\"col-md-offset-3 col-md-6\">\n                    <br /><br />\n                    <Loading loadingBarColor=\"#000\"/>\n                </div>\n            </div>);\n    }\n    var showList = [];\n    this.counter = 0;\n    // Create the user stats\n    this.state.data.map(function (showStats) {\n      this.counter++;\n      showList.push(<UserShowStats key={this.counter}\n                                   userAccountContext={this.props.userAccountContext}\n                                   showStats={showStats} />);\n      return showList;\n    }, this);\n    // If the user profile being looked at belongs to the user\n    if (this.props.userAccountContext.userProfileID == this.props.userAccountContext.requestUserID) {\n        // Create the change username tab\n        usernameTab = (\n            <li role=\"presentation\" key=\"navtab-2\">\n                <a href=\"#username\" aria-controls=\"username\" role=\"tab\" data-toggle=\"tab\">Change Username</a>\n            </li>);\n        // Username Input\n        var usernameInput = <input type=\"text\" id=\"username-input\" name=\"username-input\" className=\"form-control\"></input>;\n        var formContents = [];\n        formContents.push(<FormGroup key=\"username-input\"\n                                     labelSize=\"2\"\n                                     labelContents=\"Username:\"\n                                     inputSize=\"9\"\n                                     input={usernameInput}/>);\n        // Channel Name\n        formContents.push(<input type=\"hidden\" name=\"channel_name\" value={this.props.userAccountContext.channelName} key=\"channel-name\"></input>);\n        // Submit Button\n        formContents.push(<button type=\"submit\" className=\"btn btn-danger btn-shadow text-shadow pull-right large-font\" key=\"submit\">Submit</button>);\n        var usernameForm = <Form key=\"form-1\"\n                                 formStyle=\"horizontal\"\n                                 formSubmitUrl={this.props.userAccountContext.formSubmitUrl}\n                                 formContents={formContents}\n                                 onFormSubmit={this.onFormSubmit}\n                                 csrfToken={this.props.userAccountContext.csrfToken} />;\n        usernameTabContents = (\n            <div role=\"tabpanel\" className=\"tab-pane\" id=\"username\" key=\"tab-2\">\n                <Panel panelWidth=\"8\" panelOffset=\"2\" panelColor=\"danger\"\n                       panelHeadingContent=\"Change Username\" panelHeadingClasses=\"x-large-font\"\n                       panelBodyClasses=\"large-font black-font\"\n                       bodyContent={usernameForm} />\n            </div>);\n    }\n    var bodyContent = [];\n    bodyContent.push(<UserStatsTableBody key=\"1\"\n                                         tableClasses=\"table-condensed black-font\"\n                                         userAccountContext={this.props.userAccountContext} />);\n    return (\n        <div className=\"row\">\n            <div className=\"col-md-offset-3 col-md-6\">\n                <br />\n                <FormLabel key=\"form-label\"\n                           action={this.props.userAccountContext.action}\n                           error={this.props.userAccountContext.error}\n                           colSize=\"col-md-12\" />\n                <ul className=\"nav nav-tabs x-large-font bg-primary\" role=\"tablist\">\n                    <li role=\"presentation\" className=\"active\" key=\"navtab-1\">\n                        <a href=\"#stats\" aria-controls=\"stats\" role=\"tab\" data-toggle=\"tab\">User Statistics</a>\n                    </li>\n                    {usernameTab}\n                </ul>\n                <div className=\"tab-content\">\n                    <div role=\"tabpanel\" className=\"tab-pane active\" id=\"stats\" key=\"tab-1\">\n                        <div className=\"row\">\n                            <Panel panelWidth=\"12\" panelColor=\"danger\"\n                                 panelHeadingContent=\"Overall Statistics\" panelHeadingClasses=\"x-large-font\"\n                                 panelBodyClasses=\"large-font black-font\"\n                                 bodyContent={bodyContent} />\n                            {showList}\n                        </div>\n                    </div>\n                    {usernameTabContents}\n                </div>\n            </div>\n        </div>\n    );\n  }\n});\n\n//////////////////////////////////////////////////////////////////////////////////////////\n////////////////////////////////// SHOW RECAP COMPONENTS /////////////////////////////////\n//////////////////////////////////////////////////////////////////////////////////////////\n\nvar ShowMedia = React.createClass({\n  getInitialState: function() {\n    return {data: undefined};\n  },\n  componentDidMount: function() {\n    $.ajax({\n      url: this.props.showAPIUrl,\n      dataType: 'json',\n      success: function(data) {\n        this.setState({data: data});\n      }.bind(this),\n      error: function(xhr, status, err) {\n        console.error(this.props.url, status, err.toString());\n      }.bind(this)\n    });\n  },\n  render: function() {\n    var videoPanel;\n    var photoPanel;\n    if (!this.state.data){\n        return (<div>\n                    <Loading loadingBarColor=\"#fff\"/>\n                </div>);\n    }\n\n    if (this.state.data.photo_link) {\n        var photoBodyContent = <a href={this.props.channelFacebookPage}><div className=\"text-center\"><Image image_url={this.state.data.photo_link} /></div></a>;\n        photoPanel = <Panel key=\"1\"\n                            panelWidth=\"6\" panelOffset=\"3\" panelColor=\"warning\"\n                            panelHeadingContent=\"Recap Photo\" panelHeadingClasses=\"x-large-font\"\n                            panelBodyClasses=\"large-font black-font\"\n                            bodyContent={photoBodyContent} />\n    }\n\n    if (this.state.data.embedded_youtube) {\n        var videoBodyContent = <div className=\"embed-responsive embed-responsive-16by9\">\n                                   <iframe className=\"embed-responsive-item\" src={this.state.data.embedded_youtube}></iframe>\n                               </div>;\n        videoPanel = <Panel key=\"2\"\n                            panelWidth=\"6\" panelOffset=\"3\" panelColor=\"warning\"\n                            panelHeadingContent=\"Recap Video\" panelHeadingClasses=\"x-large-font\"\n                            panelBodyClasses=\"large-font black-font\"\n                            bodyContent={videoBodyContent} />\n    }\n\n    return (\n        <div className=\"row\">\n            <div className=\"col-sm-12\">\n                {photoPanel}\n                {videoPanel}\n            </div>\n        </div>\n    );\n  }\n});\n\n\nvar ShowRecapPanels = React.createClass({\n  getInitialState: function() {\n    return {data: undefined};\n  },\n  componentDidMount: function() {\n    $.ajax({\n      url: this.props.recapContext.showRecapAPIUrl,\n      dataType: 'json',\n      success: function(data) {\n        this.setState({data: data});\n      }.bind(this),\n      error: function(xhr, status, err) {\n        console.error(this.props.url, status, err.toString());\n      }.bind(this)\n    });\n  },\n  render: function() {\n    var panelList = [];\n    this.counter = 0;\n    panelList.push(<br key=\"br-1\" />);\n    panelList.push(<ShowMedia key=\"sm-1\" showAPIUrl={this.props.recapContext.showAPIUrl}\n                                         channelFacebookPage={this.props.recapContext.channelFacebookPage}/>)\n    if (this.state.data) {\n        // Create the suggestion list\n        this.state.data.map(function (recapItem) {\n            this.counter++;\n            var bodyContent;\n            var footerContent = [];\n            // If a player was attached to this vote\n            if (recapItem.player) {\n                bodyContent = (\n                    <div className=\"row\">\n                        <div className=\"col-md-offset-4 col-md-4 text-center recap-adjusted-img\">\n                            <PlayerImage playerAPIUrl={this.props.recapContext.playerAPIUrl}\n                                         playerID={recapItem.player}\n                                         showName=\"True\"\n                                         playerNameClasses=\"x-large-font\" />\n                        </div>\n                    </div>\n                );\n            }\n            this.voteOptionCounter = 0;\n            // If this wasn't a players only vote\n            if (!recapItem.players_only) {\n                // Create the suggestion list\n                recapItem.vote_options.map(function (voteOption) {\n                    var winningOption;\n                    this.voteOptionCounter++;\n                    // See if this is the winning option\n                    if (voteOption == recapItem.winning_option) {\n                        winningOption = \"true\";\n                    }\n                    footerContent.push(\n                        <div key={this.voteOptionCounter} className=\"row\">\n                            <div className=\"col-md-12\">\n                                <VoteOptionSuggestion voteOptionID={voteOption}\n                                                      voteOptionAPIUrl={this.props.recapContext.voteOptionAPIUrl}\n                                                      usersUrl={this.props.recapContext.usersUrl}\n                                                      channelName={this.props.recapContext.channelName}\n                                                      recap=\"true\"\n                                                      winner={winningOption} />\n                                <br />\n                            </div>\n                        </div>\n                    );\n                    return footerContent;\n                }, this);\n            }\n            var brCounter = this.counter + 'br';\n            panelList.push(<Panel key={this.counter}\n                                  panelWidth=\"6\" panelOffset=\"3\" panelColor=\"info\"\n                                  panelHeadingContent={recapItem.vote_type} panelHeadingClasses=\"x-large-font\"\n                                  panelBodyClasses=\"large-font black-font\"\n                                  bodyContent={bodyContent}\n                                  panelFooterClasses=\"white-background\"\n                                  footerContent={footerContent} />);\n            return panelList;\n        }, this);\n    } else {\n        panelList.push((<div key=\"load-1\"><Loading loadingBarColor=\"#fff\"/></div>));\n    }\n\n    return (\n        <div>{panelList}</div>\n    );\n  }\n});\n\n\nvar Recap = React.createClass({\n  render: function() {\n    var recapComponents = [];\n    var showID = this.props.recapContext.showID;\n\n    if (showID) {\n        recapComponents.push(<BigButtonDropdown key=\"1\"\n                                                buttonColor=\"primary\"\n                                                showAPIUrl={this.props.recapContext.showListAPIUrl}\n                                                baseLinkUrl={this.props.recapContext.channelRecapsUrl}\n                                                showID={this.props.recapContext.showID}\n                                                currentSelection={this.props.recapContext.currentSelection} />);\n        recapComponents.push(<br key=\"2\" />);\n        recapComponents.push(<BigButton key=\"3\"\n                                        buttonText=\"View Show Leaderboard\"\n                                        buttonColor=\"danger\"\n                                        buttonLink={this.props.recapContext.channelShowLeaderboardUrl} />);\n        // Recap panels\n        recapComponents.push(<ShowRecapPanels key=\"4\"\n                                              recapContext={this.props.recapContext} />)\n    }\n    else {\n        recapComponents.push(<BigButtonDropdown key=\"1\"\n                                                buttonColor=\"primary\"\n                                                showAPIUrl={this.props.recapContext.showListAPIUrl}\n                                                baseLinkUrl={this.props.recapContext.channelRecapsUrl}\n                                                currentSelection={this.props.recapContext.currentSelection} />);\n    }\n\n    return (\n      <div>{recapComponents}</div>\n    );\n  }\n});\n\n//////////////////////////////////////////////////////////////////////////////////////////\n///////////////////////////// SHOW SUGGESTION POOL COMPONENTS ////////////////////////////\n//////////////////////////////////////////////////////////////////////////////////////////\n\nvar ShowSuggestionPoolSuggestion = React.createClass({\n  render: function() {\n    var suggestionKey = \"suggestion-\" + this.props.suggestion.id + \"-\" + this.props.suggestion.preshow_value;\n    var upvoteButton, deleteButton;\n    var upvoteSpans = <div>\n                          <span className=\"glyphicon glyphicon-circle-arrow-up\"></span>\n                          <span id={this.props.suggestion.id}>&nbsp;Upvote</span>\n                      </div>;\n    var votesID = this.props.suggestion.id + \"-votes\";\n    var buttonID = this.props.suggestion.id + \"-button\";\n\n    if (this.props.userID && this.props.suggestion.user_id == this.props.userID ||\n        this.props.sessionID && this.props.suggestion.session_id == this.props.sessionID) {\n        upvoteButton = <button className=\"btn btn-success text-shadow large-font\" disabled=\"disabled\" type=\"submit\">\n                           {upvoteSpans}\n                       </button>;\n        deleteButton = <button type=\"submit\" className=\"btn btn-danger btn-shadow text-shadow large-font\">\n                            <span className=\"glyphicon glyphicon-trash\"></span>\n                            <span>&nbsp;Delete</span>\n                       </button>;\n    } else if (this.props.suggestion.user_already_upvoted) {\n        upvoteButton = <button className=\"btn btn-success text-shadow large-font\" disabled=\"disabled\" type=\"submit\">\n                           {upvoteSpans}\n                       </button>;\n    } else {\n        upvoteButton = <button id={buttonID} onClick={this.props.handleUpvote} className=\"btn btn-success text-shadow large-font\" type=\"submit\">\n                           {upvoteSpans}\n                       </button>;\n    }\n\n    if (this.props.isChannelAdmin == \"True\") {\n        deleteButton = <button type=\"submit\" className=\"btn btn-danger btn-shadow text-shadow large-font\">\n                            <span className=\"glyphicon glyphicon-trash\"></span>\n                            <span>&nbsp;Delete</span>\n                       </button>;\n    }\n\n    return (\n        <div className=\"animated fadeInDown\" key={suggestionKey}>\n            <div className=\"row\">\n                <div className=\"col-md-2 pull-left\">\n                    {upvoteButton}\n                    &nbsp;&nbsp;<span id={votesID} className=\"black-font xx-large-font\">{this.props.suggestion.preshow_value}</span>\n                </div>\n                <div className=\"col-md-8\">\n                    <span className=\"word-wrap black-font\">{this.props.suggestion.value}</span>\n                </div>\n                <div className=\"col-md-2 pull-right\">\n                    <form action={this.props.deleteSubmitUrl} method=\"post\">\n                        <input type=\"hidden\" name=\"delete_id\" value={this.props.suggestion.id}/>\n                        {deleteButton}\n                        <CSRFProtect csrfToken={this.props.csrfToken} />\n                    </form>\n                </div>\n            </div>\n            <hr className=\"thick bg-primary\"/>\n        </div>\n    );\n  }\n});\n\nvar ShowSuggestionPoolAdd = React.createClass({\n  render: function() {\n    var maximum;\n    var suggestalot;\n    var displayName = this.props.showSuggestionPoolContext.suggestionPoolDisplayName;\n    var suggestionInput = <input type=\"text\" className=\"form-control\" name=\"suggestion_value\" />;\n    var submitButton = <button type=\"submit\" className=\"btn btn-danger btn-shadow text-shadow large-font\">Add {displayName}</button>\n    var description = markdown.toHTML(this.props.showSuggestionPoolContext.suggestionPoolDescription);\n    if (this.props.showSuggestionPoolContext.suggestingDisabled) {\n        maximum = <div className=\"bg-info large-font text-shadow\">Maximum {displayName} suggestions entered. Please Upvote your favorites, or try another suggestion type.</div>;\n        suggestionInput = <input type=\"text\" className=\"form-control\" name=\"suggestion_value\" disabled />;\n        submitButton = <button type=\"submit\" className=\"btn btn-danger btn-shadow text-shadow large-font\" disabled>Add {displayName}</button>;\n    }\n    if (this.props.showSuggestionPoolContext.suggestalot) {\n        suggestalot = (\n            <div className=\"row text-center\">\n                <br />\n                <input type=\"hidden\" id=\"suggestalot\" name=\"suggestalot\" value=\"true\" readOnly></input>\n                <button type=\"submit\" className=\"btn btn-warning x-large-font\">Suggest-a-lot</button>;\n            </div>);\n    }\n\n    return (\n        <div className=\"row\">\n            <div className=\"col-md-6 col-md-offset-3\">\n                <div className=\"panel panel-info highlight-shadow\">\n                    <div className=\"panel-heading large-font\"><span className=\"underlay-object x-large-font text-shadow\">Add {displayName}</span>\n                        {maximum}\n                        <div className=\"white-background well well-sm black-font\" dangerouslySetInnerHTML={{__html: description}}></div>\n                    </div>\n                    <div className=\"panel-body\">\n                        <form action={this.props.showSuggestionPoolContext.formSubmitUrl} method=\"post\">\n                            <div className=\"row\">\n                                <div className=\"col-md-12\">\n                                    {suggestionInput}\n                                </div>\n                            </div>\n                            <div className=\"row text-center\">\n                                {submitButton}\n                            </div>\n                            {suggestalot}\n                            <CSRFProtect csrfToken={this.props.showSuggestionPoolContext.csrfToken} />\n                        </form>\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n  }\n});\n\nvar ShowSuggestionPool = React.createClass({\n  mixins: [SetIntervalMixin], // Use the setInterval timing mixin\n  getInitialState: function() {\n    return {data: undefined,\n            suggestionIDIndex: undefined};\n  },\n  componentDidMount: function() {\n    // Initially Get the suggestions\n    this.pullInitialSuggestions();\n    // Set an interval to update the suggestions on\n    this.setInterval(this.updateSuggestions, 10000);\n  },\n  pullInitialSuggestions: function() {\n    $.ajax({\n      url: this.props.showSuggestionPoolContext.suggestionListAPIUrl,\n      dataType: 'json',\n      success: function(data) {\n        // Set the suggestion list index to the most recently pulled down suggestions\n        var NewSuggestionIDIndex = data.map(\n            function(suggestion) { return suggestion.id; }\n        );\n        this.setState({data: data,\n                       suggestionIDIndex: NewSuggestionIDIndex});\n      }.bind(this),\n      error: function(xhr, status, err) {\n        console.error(this.props.url, status, err.toString());\n      }.bind(this)\n    });\n  },\n  updateSuggestions: function() {\n    $.ajax({\n      url: this.props.showSuggestionPoolContext.suggestionListAPIUrl,\n      dataType: 'json',\n      success: function(data) {\n        var orderedSuggestions;\n        // If we have a previous suggestion list state\n        if (this.state.data) {\n            // Set the ordered suggestion to the old state\n            orderedSuggestions = this.state.data;\n            // Loop through the pulled down suggestion list\n            data.map(function (suggestion) {\n                // Get the index of the suggestions from the previous state's suggestion list\n                var suggestionIndex = $.inArray(suggestion.id, this.state.suggestionIDIndex);\n                // If the suggestion isn't in the old list\n                if (suggestionIndex == -1) {\n                    // Append it to the bottom of the list\n                    orderedSuggestions.push(suggestion);\n                // If the suggestion is in the list\n                // AND it's still at the same index as it was before\n                } else if (orderedSuggestions[suggestionIndex].id == suggestion.id) {\n                    // Update the suggestion\n                    orderedSuggestions[suggestionIndex] = suggestion;\n                // Search for the suggestion and update it\n                } else {\n                    var arrayLength = orderedSuggestions.length;\n                    // Loop through all the suggestions\n                    for (var i = 0; i < arrayLength; i++) {\n                        // If the suggestion ids match\n                        if (orderedSuggestions[i].id == suggestion.id) {\n                            // Update the suggestion\n                            orderedSuggestions[i] = suggestion;\n                        }\n                    }\n                }\n                return orderedSuggestions;\n            }, this);\n        // Set the first non-empty data state\n        } else if (data) {\n            // Set the ordered suggestions for the first time\n            orderedSuggestions = data;\n        }\n        // Set the suggestion list index to the most recently pulled down suggestions\n        var NewSuggestionIDIndex = data.map(\n            function(suggestion) { return suggestion.id; }\n        );\n        this.setState({data: orderedSuggestions,\n                       suggestionIDIndex: NewSuggestionIDIndex});\n      }.bind(this),\n      error: function(xhr, status, err) {\n        console.error(this.props.url, status, err.toString());\n      }.bind(this)\n    });\n  },\n  handleUpvote: function(event) {\n      this.setState({data: this.state.data,\n                     suggestionIDIndex: this.state.suggestionIDIndex}, function() {\n          var suggestionID = event.target.id;\n          // Disable the upvote button for the suggestion\n          $(\"#\"+suggestionID+'-button').prop('disabled', true);\n          // Add one to the upvotes for that suggestion\n          var upvotes = $(\"#\"+suggestionID+'-votes');\n          upvotes.text(parseInt(upvotes.text())+1);\n          var upvoteData = {id: suggestionID,\n                            csrfmiddlewaretoken: this.props.showSuggestionPoolContext.csrfToken}\n          // Do a POST to upvote the suggestion\n          $.ajax({\n              url: this.props.showSuggestionPoolContext.upvoteSubmitUrl,\n              dataType: 'json',\n              type: 'POST',\n              data: upvoteData,\n              success: function(data) {\n                  // Update the votes\n                  //this.componentDidMount();\n              }.bind(this),\n              error: function(xhr, status, err) {\n                  console.error(this.props.url, status, err.toString());\n                  console.log(xhr.responseText);\n              }.bind(this)\n          });\n      });\n  },\n  render: function() {\n    var displayName = this.props.showSuggestionPoolContext.suggestionPoolDisplayName;\n    var votePanelList = [];\n    var addPanelList = [];\n    var addHeading = \"Add \" + displayName;\n    var voteHeading = \"Vote for \" + displayName;\n    var baseSuggestionPoolUrl = this.props.showSuggestionPoolContext.channelHomeUrl + \"show/\" + this.props.showSuggestionPoolContext.showID + \"/suggestion_pool/\";\n    this.counter = 0;\n    if (this.state.data) {\n        // Create the suggestion list\n        this.state.data.map(function (suggestion) {\n            this.counter++;\n            votePanelList.push(<ShowSuggestionPoolSuggestion key={this.counter}\n                                                             suggestion={suggestion}\n                                                             userID={this.props.showSuggestionPoolContext.userID}\n                                                             sessionID={this.props.showSuggestionPoolContext.sessionID}\n                                                             isChannelAdmin={this.props.showSuggestionPoolContext.isChannelAdmin}\n                                                             deleteSubmitUrl={this.props.showSuggestionPoolContext.formSubmitUrl}\n                                                             csrfToken={this.props.showSuggestionPoolContext.csrfToken}\n                                                             handleUpvote={this.handleUpvote} />);\n            return votePanelList;\n        }, this);\n    } else {\n        return (<div key=\"load-1\"><Loading loadingBarColor=\"#fff\"/></div>);\n    }\n\n    return (\n        <div className=\"row\">\n            <BottomNavSelect key=\"1\"\n                             selectedID={this.props.showSuggestionPoolContext.suggestionPoolID}\n                             listAPIUrl={this.props.showSuggestionPoolContext.suggestionPoolListAPIUrl}\n                             baseLinkUrl={baseSuggestionPoolUrl}\n                             label=\"Suggestion Types\" />\n            <FormLabel key=\"2\"\n                       action={this.props.showSuggestionPoolContext.action}\n                       error={this.props.showSuggestionPoolContext.error} />\n            <ShowSuggestionPoolAdd key=\"3\"\n                                   showSuggestionPoolContext={this.props.showSuggestionPoolContext} />\n            <Panel key=\"4\"\n                   panelWidth=\"6\" panelOffset=\"3\" panelColor=\"warning\"\n                   panelHeadingContent={voteHeading} panelHeadingClasses=\"x-large-font\"\n                   panelBodyClasses=\"large-font white-background\"\n                   bodyContent={votePanelList} />\n            <br key=\"5\" />\n            <br key=\"6\" />\n        </div>\n    );\n  }\n});\n\n\n//////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////// SHOW CONTROLLER COMPONENTS ///////////////////////////////\n//////////////////////////////////////////////////////////////////////////////////////////\n\n\nvar ShowControllerVoteType = React.createClass({\n  mixins: [SetIntervalMixin], // Use the setInterval timing mixin\n  getInitialState: function() {\n    return {data: undefined};\n  },\n  componentDidMount: function() {\n    // Initially update the vote type\n    this.updateVoteType()\n    // Set an interval to update the vote types on (10 seconds)\n    this.setInterval(this.updateVoteType, 10000);\n  },\n  updateVoteType: function() {\n    var voteTypeAPIUrl = this.props.voteTypeAPIUrl + this.props.voteTypeID + \"/?show_id=\" + this.props.showID;\n    $.ajax({\n      url: voteTypeAPIUrl,\n      dataType: 'json',\n      success: function(data) {\n        this.setState({data: data});\n      }.bind(this),\n      error: function(xhr, status, err) {\n        console.error(this.props.url, status, err.toString());\n      }.bind(this)\n    });\n  },\n  render: function() {\n    if (!this.state.data) {\n        return (<Loading loadingBarColor=\"#fff\" />);\n    }\n    var buttonStyle = {backgroundColor: this.state.data.button_color};\n    var voteTypeButton;\n    var buttonText;\n    var optionType = \"\";\n    var availableOptions = this.state.data.available_options;\n    var timerID = \"timer-\" + this.state.data.id;\n    var intervalTimer;\n    // Determine if the vote type is players or options\n    if (!this.state.data.players_only) {\n        optionType = \"Suggestions\";\n    } else {\n        optionType = \"Players\";\n    }\n    // Show what's available\n    var availableText = optionType + \" Available: \" + this.state.data.available_options;\n    // If the vote type has intervals\n    if (this.state.data.intervals) {\n        intervalTimer = <IntervalTimer key={this.state.data.interval_seconds_remaining}\n                                       timerID={timerID}\n                                       secondsRemaining={this.state.data.interval_seconds_remaining}\n                                       counterStyle=\"MinuteCounter\" />;\n        // If there are still remaining intervals\n        if (this.state.data.remaining_intervals) {\n            // If the available options are greater than the remaining intervals\n            if (this.state.data.available_options >= this.state.data.remaining_intervals ||\n                this.state.data.players_only && !this.state.data.show_player_pool && !this.state.data.vote_type_player_pool) {\n                buttonText = \"Start the \" + this.state.data.display_name + \" Interval Vote (\" + this.state.data.remaining_intervals + \")\";\n                // Create the start vote type button\n                voteTypeButton = (\n                    <div>\n                        <input key=\"1\" type=\"hidden\" name=\"vote_start\" value={this.state.data.id} />\n                        <input key=\"2\" type=\"submit\" className=\"btn btn-block btn-lg word-wrap white-input x-large-font btn-shadow text-shadow\" style={buttonStyle} value={buttonText} />\n                    </div>\n                );\n                // If interval control is automatic\n                if (!this.state.data.manual_interval_control) {\n                    // if there is a current interval\n                    if (this.state.data.current_interval ||\n                        this.state.data.current_interval == 0) {\n                        // Disable the start vote type button\n                        voteTypeButton = (\n                            <div>\n                                <input disabled=\"true\" type=\"submit\" className=\"btn btn-block btn-lg word-wrap x-large-font btn-shadow text-shadow\" style={buttonStyle} value={buttonText} />\n                            </div>\n                        );\n                    }\n                }\n            // Not enough available options for the vote\n            } else {\n                // Make sure the button text isn't redundant\n                if (this.state.data.vote_options_name !== optionType) {\n                    buttonText = \"Need more \" + this.state.data.vote_options_name + \" \" + optionType + \" (\" + availableOptions + \")  \";\n                } else {\n                    buttonText = \"Need more \" + this.state.data.vote_options_name + \" (\" + availableOptions + \")  \";\n                }\n                voteTypeButton = <input disabled=\"true\" type=\"submit\" className=\"btn btn-block btn-lg word-wrap x-large-font btn-shadow text-shadow\" style={buttonStyle} value={buttonText} />;\n            }\n        // No more intervals remain\n        } else {\n            buttonText = \"No more \" + this.state.data.display_name + \" Intervals\";\n            voteTypeButton = <input disabled=\"true\" type=\"submit\" className=\"btn btn-block btn-lg word-wrap x-large-font btn-shadow text-shadow\" style={buttonStyle} value={buttonText} />;\n        }\n    // If there are enough options for the vote\n    } else if (this.state.data.available_options) {\n        // If the vote type was already used\n        if (this.state.data.vote_type_used) {\n            buttonText = \"No more \" + this.state.data.display_name;\n            voteTypeButton = <input disabled=\"true\" type=\"submit\" className=\"btn btn-block btn-lg word-wrap x-large-font btn-shadow text-shadow\" style={buttonStyle} value={buttonText} />;\n        } else {\n            buttonText = \"Start the \" + this.state.data.display_name + \" Vote\";\n            voteTypeButton = (\n                <div>\n                    <input key=\"1\" type=\"hidden\" name=\"vote_start\" value={this.state.data.id} />\n                    <input key=\"2\" type=\"submit\" className=\"btn btn-block btn-lg word-wrap white-input x-large-font btn-shadow text-shadow\" style={buttonStyle} value={buttonText} />\n                </div>\n            );\n        }\n    // Not enough options for the vote\n    } else {\n        buttonText = \"Need more \" + this.state.data.vote_options_name + \" \" + optionType;\n        voteTypeButton = <input disabled=\"true\" type=\"submit\" className=\"btn btn-block btn-lg word-wrap x-large-font btn-shadow text-shadow\" style={buttonStyle} value={buttonText} />;\n    }\n\n    var voteTypePanelContents = (\n        <div>\n            <div className=\"row\">\n                <div className=\"col-md-6\">\n                    {voteTypeButton}\n                </div>\n                <div className=\"col-md-6\">\n                    {intervalTimer}\n                </div>\n            </div>\n            <div className=\"row\">\n                <div className=\"col-md-12\">\n                    <br />\n                    {availableText}\n                </div>\n            </div>\n        </div>\n    );\n\n    var voteTypeForm = <Form formStyle=\"horizontal\"\n                             formSubmitUrl={this.props.formSubmitUrl}\n                             formContents={voteTypePanelContents}\n                             csrfToken={this.props.csrfToken} />;\n\n    return (\n        <Panel key=\"1\"\n               panelWidth=\"6\" panelOffset=\"3\" panelColor=\"danger\"\n               panelHeadingContent={this.state.data.display_name}\n               panelHeadingStyle={buttonStyle}\n               panelHeadingClasses=\"x-large-font\"\n               panelBodyClasses=\"large-font white-background\"\n               bodyContent={voteTypeForm} />\n    );\n  }\n});\n\n\nvar ShowController = React.createClass({\n  mixins: [SetIntervalMixin], // Use the setInterval timing mixin\n  getInitialState: function() {\n    return {data: undefined};\n  },\n  componentDidMount: function() {\n    // Initially update the show controller\n    this.updateShowController()\n    // Set an interval to update the show controller on (20 seconds)\n    this.setInterval(this.updateShowController, 20000);\n  },\n  updateShowController: function() {\n    if (this.props.showControllerContext.showAPIUrl) {\n        $.ajax({\n          url: this.props.showControllerContext.showAPIUrl,\n          dataType: 'json',\n          success: function(data) {\n            this.setState({data: data});\n          }.bind(this),\n          error: function(xhr, status, err) {\n            console.error(this.props.url, status, err.toString());\n          }.bind(this)\n        });\n    }\n  },\n  render: function() {\n    var voteTypePanelList = [];\n    var showLocked;\n    var lockForm;\n    var lockedText;\n    var lockHelpText;\n    var showRemaining;\n    // If the show isn't running anymore (show has ended)\n    if (this.state.data && !this.state.data.running) {\n        this.componentWillUnmount();\n        return (<div className=\"xx-large-font\">Show has ended</div>);\n    }\n    // If the data hasn't loaded\n    if (!this.state.data) {\n        voteTypePanelList.push((<div key=\"load-1\"><Loading loadingBarColor=\"#fff\"/></div>));\n    }\n    this.counter = 0;\n    if (this.state.data) {\n        if (this.state.data.locked) {\n            lockedText = \"Unlock\";\n            lockHelpText = \"The audience currently cannot make new suggestions and are automatically redirected to the live voting page.\";\n        } else {\n            lockedText = \"Lock\";\n            lockHelpText = \"The audience currently can make suggestions and use the site without being redirected to the voting page.\";\n        }\n        // Create the Show Locked Content\n        showLocked = (\n            <div className=\"row\">\n                <div className=\"col-md-6\">\n                    <input key=\"1\" type=\"hidden\" name=\"lock_toggle\" value=\"true\" />\n                    <input key=\"2\" type=\"submit\" className=\"btn btn-block btn-danger btn-lg word-wrap white-input x-large-font btn-shadow text-shadow\" value={lockedText} />\n                </div>\n                <div className=\"col-md-6\">\n                    <p>{lockHelpText}</p>\n                </div>\n            </div>\n        );\n        lockForm = <Form formSubmitUrl={this.props.showControllerContext.formSubmitUrl}\n                         formContents={showLocked}\n                         csrfToken={this.props.showControllerContext.csrfToken} />\n        // Create the vote type list\n        this.state.data.vote_types.map(function (voteTypeID) {\n            this.counter++;\n            voteTypePanelList.push(<ShowControllerVoteType key={this.counter}\n                                                           voteTypeID={voteTypeID}\n                                                           showID={this.props.showControllerContext.showID}\n                                                           voteTypeAPIUrl={this.props.showControllerContext.voteTypeAPIUrl}\n                                                           formSubmitUrl={this.props.showControllerContext.formSubmitUrl}\n                                                           csrfToken={this.props.showControllerContext.csrfToken} />);\n            return voteTypePanelList;\n        }, this);\n        showRemaining = <IntervalTimer key={this.state.data.show_seconds_remaining}\n                                       timerID=\"show-timer\"\n                                       secondsRemaining={this.state.data.show_seconds_remaining}\n                                       counterStyle=\"HourCounter\" />;\n    }\n\n    return (\n        <div>\n            <Panel key=\"show-locked\"\n                   panelWidth=\"6\" panelOffset=\"3\" panelColor=\"danger\"\n                   panelHeadingContent=\"Suggesting Lock\"\n                   panelHeadingClasses=\"x-large-font\"\n                   panelBodyClasses=\"large-font white-background\"\n                   bodyContent={lockForm} />\n            {voteTypePanelList}\n            <Panel key=\"show-remaining\"\n                   panelWidth=\"6\" panelOffset=\"3\" panelColor=\"success\"\n                   panelHeadingContent=\"Show Remaining\"\n                   panelHeadingClasses=\"x-large-font\"\n                   panelBodyClasses=\"large-font white-background\"\n                   bodyContent={showRemaining} />\n        </div>\n    );\n  }\n});\n\n\n//////////////////////////////////////////////////////////////////////////////////////////\n////////////////////////////////// SHOW DISPLAY COMPONENTS ///////////////////////////////\n//////////////////////////////////////////////////////////////////////////////////////////\n\n\nvar VoteOptionPlayer = React.createClass({\n  mixins: [SetIntervalMixin], // Use the setInterval timing mixin\n  getInitialState: function() {\n    return {data: undefined};\n  },\n  loadPlayerOptionData: function() {\n    // Get the vote option data\n    var voteOptionUrl = this.props.voteOptionAPIUrl + this.props.voteOptionID + \"/\";\n    $.ajax({\n      url: voteOptionUrl,\n      dataType: 'json',\n      success: function(data) {\n        var nextState = {data: data};\n        // If there was a previous state\n        if (this.state.data) {\n            // Get the difference between the old amount of live votes and the new amount\n            var voteDelta = data.live_votes - this.state.data.live_votes;\n            // If there is a difference\n            if (voteDelta > 0) {\n                ion.sound({\n                    sounds: [\n                        {name: \"cha_ching\"}\n                    ],\n                    volume: 1.0,\n                    path: this.props.audioPath,\n                    preload: true\n                });\n                // Play the cha-ching sound\n                ion.sound.play(\"cha_ching\");\n                // Set the new state's vote delta\n                nextState['voteDelta'] = voteDelta;\n            } else {\n                // Set the new state's vote delta\n                nextState['voteDelta'] = undefined;\n            }\n        }\n        this.setState(nextState);\n      }.bind(this),\n      error: function(xhr, status, err) {\n        console.error(this.props.url, status, err.toString());\n      }.bind(this)\n    });\n  },\n  componentDidMount: function() {\n    this.loadPlayerOptionData();\n    this.setInterval(this.loadPlayerOptionData, 1000);\n  },\n  render: function() {\n    if (!this.state.data) {\n        return (<div></div>);\n    }\n    // Create the scale for the vote count colors\n\tvar scale = chroma.scale(HEAT_MAP_COLORS).domain(\n\t    [this.state.data.min_votes, this.state.data.max_votes],\n\t    this.state.data.vote_options_count).out('hex');\n\tvar liveVotesColor = scale(this.state.data.live_votes);\n    var deltaSpan;\n    // If the live votes changed\n    if (this.state.voteDelta) {\n        deltaSpan = <span className=\"xx-large-font animated fadeOutRight fadeOutRight-mod\">+{this.state.voteDelta}</span>;\n    }\n    var bodyContent = (\n        <div className=\"text-center\">\n            <img src={this.state.data.player_photo} className=\"img-responsive img-thumbnail highlight-shadow\" />\n            <br />\n            <button className=\"btn btn-info btn-md word-wrap x-large-font btn-shadow text-shadow\">{this.state.data.player_name}</button>\n        </div>\n    );\n    var footerContent = <button className=\"btn btn-primary btn-md btn-block word-wrap x-large-font btn-shadow text-shadow\"><Badge badgeColor={liveVotesColor} content={this.state.data.live_votes} />{deltaSpan}</button>;\n\n    return (\n        <Panel panelWidth=\"12\" panelColor=\"primary\"\n               panelAnimate=\"animated fadeInUpBig\"\n               panelHeadingContent={this.state.data.option_number}\n               panelHeadingStyle={this.props.headingStyle}\n               panelHeadingClasses=\"xx-large-font text-center\"\n               bodyContent={bodyContent}\n               footerContent={footerContent} />\n    );\n  }\n});\n\nvar VoteOptionSuggestion = React.createClass({\n  mixins: [SetIntervalMixin], // Use the setInterval timing mixin\n  getInitialState: function() {\n    return {data: undefined};\n  },\n  loadSuggestionOptionData: function() {\n    // Get the vote option data\n    var voteOptionUrl = this.props.voteOptionAPIUrl + this.props.voteOptionID + \"/\";\n    $.ajax({\n      url: voteOptionUrl,\n      dataType: 'json',\n      success: function(data) {\n        var nextState = {data: data};\n        // If there was a previous state\n        if (this.state.data) {\n            // Get the difference between the old amount of live votes and the new amount\n            var voteDelta = data.live_votes - this.state.data.live_votes;\n            // If there is a difference\n            if (voteDelta > 0) {\n                ion.sound({\n                    sounds: [\n                        {name: \"cha_ching\"}\n                    ],\n                    volume: 1.0,\n                    path: this.props.audioPath,\n                    preload: true\n                });\n                // Play the cha-ching sound\n                ion.sound.play(\"cha_ching\");\n                // Set the new state's vote delta\n                nextState['voteDelta'] = voteDelta;\n            } else {\n                // Set the new state's vote delta\n                nextState['voteDelta'] = undefined;\n            }\n        }\n        this.setState(nextState);\n      }.bind(this),\n      error: function(xhr, status, err) {\n        console.error(this.props.url, status, err.toString());\n      }.bind(this)\n    });\n  },\n  componentDidMount: function() {\n    this.loadSuggestionOptionData();\n    // If we should update this on regular 2 second intervals (not a recap)\n    if (!this.props.recap) {\n        this.setInterval(this.loadSuggestionOptionData, 1000);\n    }\n  },\n  render: function() {\n    if (!this.state.data) {\n        return (<div></div>);\n    }\n    // Create the scale for the vote count colors\n\tvar scale = chroma.scale(HEAT_MAP_COLORS).domain(\n\t    [this.state.data.min_votes, this.state.data.max_votes],\n\t    this.state.data.vote_options_count).out('hex');\n\tvar liveVotesColor = scale(this.state.data.live_votes);\n    var deltaSpan;\n    var starImage;\n    var submittedBy;\n    var optionButtonClasses;\n    var badgeClasses;\n    // If this is a recap option\n    if (this.props.recap) {\n        var submittedBy;\n        optionButtonClasses = \"btn btn-block word-wrap x-large-font btn-shadow text-shadow animated fadeInDown\";\n        // If this was the winning option\n        if (this.props.winner) {\n            starImage = <StarImage />;\n            optionButtonClasses = optionButtonClasses + \" btn-warning\";\n        } else {\n            optionButtonClasses = optionButtonClasses + \" btn-primary\";\n        }\n        badgeClasses = \"x-large-font text-shadow\";\n        // If there is a user attached to the option\n        if (this.state.data.user_id) {\n            var userUrl = this.props.usersUrl + this.state.data.user_id + \"/?channel_name=\" + this.props.channelName;\n            submittedBy = <div>Submitted by: <a href={userUrl} className=\"recap-user-link\">{this.state.data.username}</a></div>;\n        // If they were annoymous\n        } else {\n            submittedBy = <div>Submitted by: Anonymous</div>;\n        }\n    // It's a vote option\n    } else {\n        optionButtonClasses = \"btn btn-primary btn-lg btn-block word-wrap xx-large-font btn-shadow text-shadow animated fadeInDown\";\n        badgeClasses = \"xx-large-font text-shadow\";\n    }\n    // If the live votes changed\n    if (this.state.voteDelta) {\n        deltaSpan = <span className=\"xx-large-font animated fadeOutRight fadeOutRight-mod\">+{this.state.voteDelta}</span>;\n    }\n\n    return (\n        <button className={optionButtonClasses}>\n           {this.state.data.option_number}. {this.state.data.suggestion_value} <Badge badgeColor={liveVotesColor} badgeClasses={badgeClasses} content={this.state.data.live_votes} />{deltaSpan}{starImage}\n           {submittedBy}\n        </button>\n    );\n  }\n});\n\nvar RemainingIntervalsButton = React.createClass({\n  getInitialState: function() {\n    return {data: undefined};\n  },\n  componentDidMount: function() {\n    // Get the vote type data\n    var voteTypeUrl = this.props.voteTypeAPIUrl + this.props.voteTypeID + \"/?show_id=\" + this.props.showID;\n    $.ajax({\n      url: voteTypeUrl,\n      dataType: 'json',\n      success: function(data) {\n        this.setState({data: data});\n      }.bind(this),\n      error: function(xhr, status, err) {\n        console.error(this.props.url, status, err.toString());\n      }.bind(this)\n    });\n  },\n  render: function() {\n    // If the vote type isn't loaded yet\n    if (!this.state.data) {\n        return (<div></div>);\n    }\n    // Make sure the current state has intervals\n    if (this.state.data.intervals) {\n        var buttonStyle = {backgroundColor: this.state.data.button_color};\n        return (\n            <div>\n                <br/>\n                <button className=\"btn btn-block btn-lg word-wrap white-input x-large-font btn-shadow text-shadow animated fadeInDown\" style={buttonStyle}>{this.state.data.display_name} Remaining: {this.state.data.remaining_intervals}</button>\n            </div>\n        );\n    } else {\n        return (<div></div>);\n    }\n  }\n});\n\n\nvar ShowDefaultDisplay = React.createClass({\n  getInitialState: function() {\n    return {data: undefined};\n  },\n  componentDidMount: function() {\n    // Get the show leaderboard data\n    $.ajax({\n      url: this.props.showLeaderboardAPIUrl,\n      dataType: 'json',\n      success: function(data) {\n        this.setState({data: data});\n      }.bind(this),\n      error: function(xhr, status, err) {\n        console.error(this.props.url, status, err.toString());\n      }.bind(this)\n    });\n  },\n  render: function() {\n    // Create the intervals remaining buttons\n    var remainingVoteTypes = [];\n    var leaderboardEntries = [];\n    var teamPhoto;\n    var showLeaderboard;\n    var leKey;\n    this.counter = 1;\n    // Get the remaining vote types buttons\n    this.props.showData.vote_types.map(function (voteTypeID) {\n        remainingVoteTypes.push(\n            <div key={voteTypeID} className=\"row\">\n                <div className=\"col-md-12\">\n                    <RemainingIntervalsButton voteTypeID={voteTypeID}\n                                              showID={this.props.showID}\n                                              voteTypeAPIUrl={this.props.voteTypeAPIUrl} />\n                </div>\n            </div>);\n        return remainingVoteTypes;\n    }, this);\n    // Get the current top of the leaderboard\n    if (this.state.data) {\n        this.state.data.map(function (leaderboardEntry) {\n            leKey = 'leaderboard-entry-' + this.counter;\n            leaderboardEntries.push(<div key={leKey} className=\"btn btn-danger btn-block btn-shadow text-shadow large-font animated fadeInDown\">{this.counter}. {leaderboardEntry.username}</div>);\n            this.counter++;\n            return leaderboardEntries;\n        }, this);\n    } else {\n        leaderboardEntries.push(<div key=\"le-empty\"></div>);\n    }\n    if (this.props.teamPhotoUrl) {\n        teamPhoto = (\n            <div key=\"1\" className=\"col-md-8 animated fadeInLeftBig\">\n                <Image image_url={this.props.teamPhotoUrl} />\n            </div>);\n        showLeaderboard = (\n            <div key=\"2\" className=\"col-md-4 animated fadeInRightBig\">\n                <Panel panelWidth=\"12\" panelColor=\"primary\"\n                   panelHeadingContent=\"Current Leaders\" panelHeadingClasses=\"large-font\"\n                   bodyContent={leaderboardEntries} />\n            </div>);\n    } else if (this.state.data) {\n        showLeaderboard = (\n            <div key=\"2\" className=\"col-md-12\">\n                <Panel panelWidth=\"12\" panelColor=\"primary\"\n                   panelHeadingContent=\"Current Leaders\" panelHeadingClasses=\"x-large-font\"\n                   bodyContent={leaderboardEntries} />\n            </div>);\n    }\n    return (\n        <div className=\"row\">\n            <div className=\"col-md-6 col-md-offset-3\">\n                <div key=\"leaderboard-0\" className=\"row\">\n                    <div className=\"col-md-12\">\n                        <a className=\"text-center\" href={this.props.showLeaderboardUrl}>\n                            <div className=\"btn btn-info btn-block btn-lg btn-shadow text-shadow x-large-font animated fadeInDown\">Leaderboard</div>\n                        </a>\n                        <br/>\n                    </div>\n                </div>\n                <div key=\"team-leader-0\" className=\"row\">\n                    {teamPhoto}{showLeaderboard}\n                </div>\n                {remainingVoteTypes}\n            </div>\n        </div>\n    );\n  }\n});\n\nvar ShowResultDisplayVotedOption = React.createClass({\n  getInitialState: function() {\n    return {data: undefined};\n  },\n  componentDidMount: function() {\n    // Get the vote option data\n    var voteOptionUrl = this.props.voteOptionAPIUrl + this.props.voteOptionID + \"/\";\n    $.ajax({\n      url: voteOptionUrl,\n      dataType: 'json',\n      success: function(data) {\n        this.setState({data: data});\n        ion.sound({\n            sounds: [\n                {name: \"power_chord\"}\n            ],\n            volume: 1.0,\n            path: this.props.audioPath,\n            preload: true\n        });\n        // Play the result guitar chord\n        ion.sound.play(\"power_chord\");\n      }.bind(this),\n      error: function(xhr, status, err) {\n        console.error(this.props.url, status, err.toString());\n      }.bind(this)\n    });\n  },\n  render: function() {\n    if (!this.state.data) {\n        return (<Loading loadingBarColor=\"#fff\" />);\n    }\n    var playerID = this.props.playerID;\n    var bodyContent;\n    var submittedByText, submittedByButton;;\n    var footerContent = [];\n    var headingStyle = {backgroundColor: this.props.voteTypeData.button_color};\n    var voteTypeResult = this.props.voteTypeData.display_name + \" Result\";\n    var liveVotesClasses = \"btn btn-danger btn-lg word-wrap xx-large-font btn-shadow text-shadow\";\n    // If there was a player in the voted option, use that player\n    if (this.state.data.player) {\n        playerID = this.state.data.player;\n    }\n    // If there was a current voted player for this result\n    if (playerID) {\n        bodyContent = <div className=\"text-center\">\n                          <PlayerImage playerAPIUrl={this.props.playerAPIUrl}\n                                       playerID={playerID}\n                                       showName=\"True\"\n                                       playerNameClasses=\"xx-large-font\" />\n                      </div>;\n    }\n    // If there was a current voted option for this result\n    if (this.state.data.suggestion) {\n        footerContent.push(\n            <div key=\"voted-suggestion-div\">\n                <button key=\"voted-suggetion\" className=\"btn btn-primary btn-lg btn-block word-wrap xx-large-font btn-shadow text-shadow animated shake shake-mod\">\n                    {this.state.data.option_number}. {this.state.data.suggestion_value}\n                </button>\n                <br key=\"suggestion-br\" />\n            </div>\n        );\n        // If it's not a players only vote\n        if (!this.props.voteTypeData.players_only) {\n            var buttonClasses = \"btn btn-primary btn-lg word-wrap xx-large-font btn-shadow text-shadow\";\n            // If a logged in user submitted the suggestion\n            if (this.state.data.username) {\n                // If the user has more than one win\n                if (this.state.data.user_wins > 1) {\n                    // Use the fire class\n                    buttonClasses = buttonClasses + \" fire\";\n                    // Play the fire sound\n                    ion.sound({\n                        sounds: [\n                            {name: \"fire\"}\n                        ],\n                        volume: 1.0,\n                        path: this.props.audioPath,\n                        preload: true\n                    });\n                    // Play the fire sound\n                    ion.sound.play(\"fire\");\n                } else {\n                    // Pulse class\n                    buttonClasses = buttonClasses + \" animated pulse pulse-mod\";\n                }\n                submittedByText = \"Submitted by: \" + this.state.data.username;\n            } else {\n                submittedByText = \"Submitted by: Anonymous\";\n            }\n            submittedByButton = <button key=\"submitted-by\" className={buttonClasses}>{submittedByText}</button>;\n        }\n    // If there was no voted option, only player\n    } else {\n        liveVotesClasses = liveVotesClasses + \" animated pulse pulse-mod\";\n    }\n    footerContent.push(\n        <div key=\"submit-votes\" className=\"row text-center\">\n            <button key=\"live-votes\" className={liveVotesClasses}>{this.state.data.live_votes} Votes</button>\n            &nbsp;{submittedByButton}\n        </div>\n    );\n\n    return (\n        <div className=\"row\">\n            <div className=\"col-md-10 col-md-offset-1\">\n                <Panel panelWidth=\"12\"\n                       panelAnimate=\"animated fadeInUpBig\"\n                       panelHeadingStyle={headingStyle}\n                       panelHeadingContent={voteTypeResult} panelHeadingClasses=\"xx-large-font\"\n                       bodyContent={bodyContent}\n                       footerContent={footerContent} />\n            </div>\n        </div>\n    );\n  }\n});\n\nvar ShowResultDisplay = React.createClass({\n  getInitialState: function() {\n    return {data: undefined};\n  },\n  componentDidMount: function() {\n    // Get the vote type data\n    var voteTypeUrl = this.props.voteTypeAPIUrl + this.props.showData.current_vote_type + \"/?show_id=\" + this.props.showID;\n    $.ajax({\n      url: voteTypeUrl,\n      dataType: 'json',\n      success: function(data) {\n        this.setState({data: data});\n      }.bind(this),\n      error: function(xhr, status, err) {\n        console.error(this.props.url, status, err.toString());\n      }.bind(this)\n    });\n  },\n  render: function() {\n    if (!this.state.data) {\n        return (<Loading loadingBarColor=\"#fff\" />);\n    }\n\n    return (\n        <ShowResultDisplayVotedOption voteOptionID={this.state.data.voted_option}\n                                      playerID={this.props.showData.current_player}\n                                      voteTypeData={this.state.data}\n                                      playerAPIUrl={this.props.playerAPIUrl}\n                                      voteOptionAPIUrl={this.props.voteOptionAPIUrl}\n                                      audioPath={this.props.audioPath} />\n    );\n  }\n});\n\n\nvar ShowVotingDisplay = React.createClass({\n  getInitialState: function() {\n    return {data: undefined};\n  },\n  componentDidMount: function() {\n    // Get the vote type data\n    var voteTypeUrl = this.props.voteTypeAPIUrl + this.props.showData.current_vote_type + \"/?show_id=\" + this.props.showID;\n    $.ajax({\n      url: voteTypeUrl,\n      dataType: 'json',\n      success: function(data) {\n        this.setState({data: data});\n        // Play the voting chime\n        ion.sound({\n            sounds: [\n                {name: \"action-chime\"}\n            ],\n            volume: 1.0,\n            path: this.props.audioPath,\n            preload: true\n        });\n        // Play the voting chime\n        ion.sound.play(\"action-chime\");\n      }.bind(this),\n      error: function(xhr, status, err) {\n        console.error(this.props.url, status, err.toString());\n      }.bind(this)\n    });\n  },\n  render: function() {\n    if (!this.state.data) {\n        return (<Loading loadingBarColor=\"#fff\" />);\n    }\n    this.counter = 0;\n    var votingDisplay = [];\n    var footerContent = [];\n    var headingStyle = {backgroundColor: this.state.data.button_color};\n    var voteTypeHeading = this.state.data.display_name;\n    // Create the timer for the vote\n    var intervalTimer = <IntervalTimer key={this.state.data.vote_seconds_remaining}\n                                       timerID=\"countdown\"\n                                       secondsRemaining={this.state.data.vote_seconds_remaining} />;\n    var playerImage;\n    // If this is a player only display\n    if (this.state.data.players_only) {\n        // Create the player list\n        var playerOptionList = [];\n        var rowKey, playerDivKey;\n        var playersPerRow = 5;\n        // Add the countdown to the first row\n        playerOptionList.push(\n            <div key={this.counter} className=\"col-md-2\">\n                <Panel key=\"countdown-panel\"\n                       panelWidth=\"12\"\n                       panelHeadingContent=\"Time Remaining\"\n                       panelHeadingStyle={headingStyle}\n                       panelHeadingClasses=\"x-large-font\"\n                       bodyContent={intervalTimer} />\n            </div>\n        );\n        this.props.showData.vote_options.map(function (voteOptionID) {\n            this.counter++;\n            rowKey = \"row-\" + this.counter;\n            playerOptionList.push(\n                <div key={this.counter} className=\"col-md-2\">\n                    <VoteOptionPlayer voteOptionID={voteOptionID}\n                                      voteOptionAPIUrl={this.props.voteOptionAPIUrl}\n                                      headingStyle={headingStyle}\n                                      audioPath={this.props.audioPath} />\n                </div>\n            );\n            // If we've either started our first row, or hit the next row\n            if (this.counter % playersPerRow == 0) {\n                // Create a row\n                votingDisplay.push(\n                    <div key={rowKey} className=\"row\">\n                        {playerOptionList}\n                    </div>\n                );\n                //Reset the player option list\n                playerOptionList = [];\n            }\n            return votingDisplay;\n        }, this);\n        // If there are any remaining items left in the player list\n        if (playerOptionList) {\n            // Create a row for the remainder\n            votingDisplay.push(\n                <div key=\"final-row\" className=\"row\">\n                    {playerOptionList}\n                </div>\n            );\n        }\n    } else {\n        var bodyContent;\n        var footerContent = [];\n        voteTypeHeading = voteTypeHeading + \" Voting\";\n        // If we are viewing a vote with player options\n        if (this.state.data.player_options) {\n            var playerKey = \"player-image-\" + this.props.showData.current_player;\n            // Show the timer and player side by side\n            bodyContent = <div key=\"timer-div\" className=\"row\">\n                              <div className=\"col-md-offset-4 col-md-2 text-center\">\n                                  <PlayerImage key={playerKey}\n                                               playerAPIUrl={this.props.playerAPIUrl}\n                                               playerID={this.props.showData.current_player}\n                                               showName=\"True\"\n                                               playerNameClasses=\"x-large-font\" />\n                              </div>\n                              <div className=\"col-md-3\">\n                                  {intervalTimer}\n                              </div>\n                          </div>;\n        // If we just need to show the timer\n        } else {\n            bodyContent = <div className=\"row\">\n                              <div className=\"col-md-offset-5 col-md-4\">\n                                  {intervalTimer}\n                              </div>\n                          </div>;\n        }\n\n        this.props.showData.vote_options.map(function (voteOption) {\n            this.counter++;\n            footerContent.push(\n                <div key={this.counter} className=\"row\">\n                    <div className=\"col-md-12\">\n                        <VoteOptionSuggestion voteOptionID={voteOption}\n                                              voteOptionAPIUrl={this.props.voteOptionAPIUrl}\n                                              audioPath={this.props.audioPath} />\n                        <br />\n                    </div>\n                </div>\n            );\n            return footerContent;\n        }, this);\n        votingDisplay = <Panel panelWidth=\"12\"\n                               panelAnimate=\"animated fadeInUpBig\"\n                               panelHeadingContent={voteTypeHeading}\n                               panelHeadingStyle={headingStyle}\n                               panelHeadingClasses=\"xx-large-font\"\n                               bodyContent={bodyContent}\n                               panelBodyClasses=\"white-background\"\n                               footerContent={footerContent} />;\n    }\n\n    return (\n        <div className=\"row\">\n            <div className=\"col-md-10 col-md-offset-1\">\n                {votingDisplay}\n            </div>\n        </div>\n    );\n  }\n});\n\n\nvar ShowDisplay = React.createClass({\n  mixins: [SetIntervalMixin], // Use the setInterval timing mixin\n  getInitialState: function() {\n    return {data: undefined};\n  },\n  loadShowData: function() {\n    if (this.props.showDisplayContext.showAPIUrl) {\n        $.ajax({\n          url: this.props.showDisplayContext.showAPIUrl,\n          dataType: 'json',\n          success: function(data) {\n            this.setState({data: data});\n          }.bind(this),\n          error: function(xhr, status, err) {\n            console.error(this.props.url, status, err.toString());\n          }.bind(this)\n        });\n    }\n  },\n  componentDidMount: function() {\n    this.loadShowData();\n    this.setInterval(this.loadShowData, 1000);\n  },\n  render: function() {\n    // If the vote type isn't loaded yet\n    if (!this.state.data) {\n        return (<Loading loadingBarColor=\"#fff\" />);\n    }\n    // If the show isn't running anymore (show has ended)\n    if (!this.state.data.running) {\n        this.componentWillUnmount();\n        return (<div className=\"xx-large-font\">Show has ended</div>);\n    }\n    var showStateDisplay;\n    // Default Show display\n    if (this.state.data.current_display == \"default\") {\n        showStateDisplay = <ShowDefaultDisplay showData={this.state.data}\n                                               showID={this.props.showDisplayContext.showID}\n                                               voteTypeAPIUrl={this.props.showDisplayContext.voteTypeAPIUrl}\n                                               showLeaderboardAPIUrl={this.props.showDisplayContext.showLeaderboardAPIUrl}\n                                               showLeaderboardUrl={this.props.showDisplayContext.channelShowLeaderboardUrl}\n                                               teamPhotoUrl={this.props.showDisplayContext.teamPhotoUrl} />;\n    } else if (this.state.data.current_display == \"voting\") {\n        showStateDisplay = <ShowVotingDisplay showData={this.state.data}\n                                              showID={this.props.showDisplayContext.showID}\n                                              playerAPIUrl={this.props.showDisplayContext.playerAPIUrl}\n                                              voteTypeAPIUrl={this.props.showDisplayContext.voteTypeAPIUrl}\n                                              voteOptionAPIUrl={this.props.showDisplayContext.voteOptionAPIUrl}\n                                              audioPath={this.props.showDisplayContext.audioPath} />;\n    } else if (this.state.data.current_display == \"result\") {\n        showStateDisplay = <ShowResultDisplay showData={this.state.data}\n                                              showID={this.props.showDisplayContext.showID}\n                                              playerAPIUrl={this.props.showDisplayContext.playerAPIUrl}\n                                              voteTypeAPIUrl={this.props.showDisplayContext.voteTypeAPIUrl}\n                                              voteOptionAPIUrl={this.props.showDisplayContext.voteOptionAPIUrl}\n                                              audioPath={this.props.showDisplayContext.audioPath} />;\n    }\n    return (\n        <div>\n            {showStateDisplay}\n        </div>\n    );\n  }\n});\n\n///////////////////////////////////////////////////////////////////////////////////////////\n//////////////////////////////////////// ROOT COMPONENT ///////////////////////////////////\n///////////////////////////////////////////////////////////////////////////////////////////\n\nvar RootComponent = React.createClass({\n  render: function() {\n    var rootType = getElementValueOrNull(\"rootType\");\n    var rootComponents = [];\n    if (rootType == \"user-account\") {\n        var userAccountContext = {\n            channelName: getElementValueOrNull(\"channelName\"),\n            showListAPIUrl: getElementValueOrNull(\"showListAPIUrl\"),\n            suggestionListAPIUrl: getElementValueOrNull(\"suggestionListAPIUrl\"),\n            imageBaseUrl: getElementValueOrNull(\"imageBaseUrl\"),\n            medalsUrl: getElementValueOrNull(\"medalsUrl\"),\n            medalListAPIUrl: getElementValueOrNull(\"medalListAPIUrl\"),\n            userProfileID: getElementValueOrNull(\"userProfileID\"),\n            requestUserID: getElementValueOrNull(\"requestUserID\"),\n            leaderboardStatsAPIUrl: getElementValueOrNull(\"leaderboardStatsAPIUrl\"),\n            userStatsAPIUrl: getElementValueOrNull(\"userStatsAPIUrl\"),\n            formSubmitUrl: getElementValueOrNull(\"formSubmitUrl\"),\n            csrfToken: getElementValueOrNull(\"csrfToken\"),\n            action: getElementValueOrNull(\"action\"),\n            error: getElementValueOrNull(\"error\")\n        };\n        rootComponents.push(<UserStats key=\"1\" userAccountContext={userAccountContext} />);\n    } else if (rootType == \"leaderboard\") {\n        var leaderboardContext = {\n            channelID: getElementValueOrNull(\"channelID\"),\n            channelName: getElementValueOrNull(\"channelName\"),\n            page: getElementValueOrNull(\"page\"),\n            maxPerPage: getElementValueOrNull(\"maxPerPage\"),\n            maxPages: getElementValueOrNull(\"maxPages\"),\n            channelLeaderboardAPIUrl: getElementValueOrNull(\"channelLeaderboardAPIUrl\"),\n            channelShowRecapUrl: getElementValueOrNull(\"channelShowRecapUrl\"),\n            leaderboardEntryAPIUrl: getElementValueOrNull(\"leaderboardEntryAPIUrl\"),\n            leaderboardEntrySpanAPIUrl: getElementValueOrNull(\"leaderboardEntrySpanAPIUrl\"),\n            leaderboardSpanAPIUrl: getElementValueOrNull(\"leaderboardSpanAPIUrl\"),\n            medalsUrl: getElementValueOrNull(\"medalsUrl\"),\n            medalListAPIUrl: getElementValueOrNull(\"medalListAPIUrl\"),\n            channelLeaderboardUrl: getElementValueOrNull(\"channelLeaderboardUrl\"),\n            usersUrl: getElementValueOrNull(\"usersUrl\"),\n            contentType: getElementValueOrNull(\"contentType\"),\n            showID: getElementValueOrNull(\"showID\"),\n            medalsAwarded: getElementValueOrNull(\"medalsAwarded\"),\n            currentSelection: getElementValueOrNull(\"currentSelection\"),\n            showListAPIUrl: getElementValueOrNull(\"showListAPIUrl\"),\n            start: getElementValueOrNull(\"start\"),\n            end: getElementValueOrNull(\"end\"),\n            isAdmin: getElementValueOrNull(\"isAdmin\"),\n            csrfToken: getElementValueOrNull(\"csrfToken\"),\n        };\n        rootComponents.push(<Leaderboard key=\"1\" leaderboardContext={leaderboardContext} />);\n    } else if (rootType == \"recap\") {\n        var recapContext = {\n            channelName: getElementValueOrNull(\"channelName\"),\n            imageBaseUrl: getElementValueOrNull(\"imageBaseUrl\"),\n            showListAPIUrl: getElementValueOrNull(\"showListAPIUrl\"),\n            voteOptionAPIUrl: getElementValueOrNull(\"voteOptionAPIUrl\"),\n            playerAPIUrl: getElementValueOrNull(\"playerAPIUrl\"),\n            channelRecapsUrl: getElementValueOrNull(\"channelRecapsUrl\"),\n            currentSelection: getElementValueOrNull(\"currentSelection\"),\n            channelShowLeaderboardUrl: getElementValueOrNull(\"channelShowLeaderboardUrl\"),\n            showRecapAPIUrl: getElementValueOrNull(\"showRecapAPIUrl\"),\n            usersUrl: getElementValueOrNull(\"usersUrl\"),\n            showAPIUrl: getElementValueOrNull(\"showAPIUrl\"),\n            showID: getElementValueOrNull(\"showID\"),\n            channelFacebookPage: getElementValueOrNull(\"channelFacebookPage\")\n        };\n        rootComponents.push(<Recap key=\"1\" recapContext={recapContext} />);\n    } else if (rootType == \"channel-create-edit\") {\n        var channelCreateEditContext = {\n            channelID: getElementValueOrNull(\"channelID\"),\n            isPremium: getElementValueOrNull(\"isPremium\"),\n            contactEmail: getElementValueOrNull(\"contactEmail\"),\n            channelAPIUrl: getElementValueOrNull(\"channelAPIUrl\"),\n            channelNameAPIUrl: getElementValueOrNull(\"channelNameAPIUrl\"),\n            userID: getElementValueOrNull(\"userID\"),\n            formSubmitUrl: getElementValueOrNull(\"formSubmitUrl\"),\n            csrfToken: getElementValueOrNull(\"csrfToken\"),\n            action: getElementValueOrNull(\"action\"),\n            error: getElementValueOrNull(\"error\")\n        };\n        rootComponents.push(<ChannelCreateEditForm key=\"1\"\n                                                   channelCreateEditContext={channelCreateEditContext} />);\n    } else if (rootType == \"channel_players\") {\n        var addPlayerContext = {\n            playerAPIUrl: getElementValueOrNull(\"playerAPIUrl\"),\n            playerListAPIUrl: getElementValueOrNull(\"playerListAPIUrl\"),\n            formSubmitUrl: getElementValueOrNull(\"formSubmitUrl\"),\n            csrfToken: getElementValueOrNull(\"csrfToken\"),\n            action: getElementValueOrNull(\"action\"),\n            error: getElementValueOrNull(\"error\")\n        };\n        rootComponents.push(<PlayerForm key=\"1\" addPlayerContext={addPlayerContext} />);\n    } else if (rootType == \"channel_suggestion_pools\") {\n        var suggestionPoolContext = {\n            isPremium: getElementValueOrNull(\"isPremium\"),\n            suggestionPoolAPIUrl: getElementValueOrNull(\"suggestionPoolAPIUrl\"),\n            suggestionPoolListAPIUrl: getElementValueOrNull(\"suggestionPoolListAPIUrl\"),\n            formSubmitUrl: getElementValueOrNull(\"formSubmitUrl\"),\n            csrfToken: getElementValueOrNull(\"csrfToken\"),\n            action: getElementValueOrNull(\"action\"),\n            error: getElementValueOrNull(\"error\")\n        };\n        rootComponents.push(<SuggestionPoolForm key=\"1\" suggestionPoolContext={suggestionPoolContext} />);\n    } else if (rootType == \"channel_vote_types\") {\n        var voteTypeContext = {\n            isPremium: getElementValueOrNull(\"isPremium\"),\n            voteTypeAPIUrl: getElementValueOrNull(\"voteTypeAPIUrl\"),\n            voteTypeListAPIUrl: getElementValueOrNull(\"voteTypeListAPIUrl\"),\n            suggestionPoolListAPIUrl: getElementValueOrNull(\"suggestionPoolListAPIUrl\"),\n            voteStyleAPIUrl: getElementValueOrNull(\"voteStyleAPIUrl\"),\n            formSubmitUrl: getElementValueOrNull(\"formSubmitUrl\"),\n            csrfToken: getElementValueOrNull(\"csrfToken\"),\n            action: getElementValueOrNull(\"action\"),\n            error: getElementValueOrNull(\"error\")\n        };\n        rootComponents.push(<VoteTypeForm key=\"1\" voteTypeContext={voteTypeContext} />);\n    } else if (rootType == \"channel_shows\") {\n        var channelShowContext = {\n            isPremium: getElementValueOrNull(\"isPremium\"),\n            showAPIUrl: getElementValueOrNull(\"showAPIUrl\"),\n            showListAPIUrl: getElementValueOrNull(\"showListAPIUrl\"),\n            voteTypeListAPIUrl: getElementValueOrNull(\"voteTypeListAPIUrl\"),\n            playerListAPIUrl: getElementValueOrNull(\"playerListAPIUrl\"),\n            formSubmitUrl: getElementValueOrNull(\"formSubmitUrl\"),\n            csrfToken: getElementValueOrNull(\"csrfToken\"),\n            action: getElementValueOrNull(\"action\"),\n            error: getElementValueOrNull(\"error\")\n        };\n        rootComponents.push(<ChannelShowForm key=\"1\" channelShowContext={channelShowContext} />);\n    } else if (rootType == \"channel_leaderboard_spans\") {\n        var channelLeaderboardSpanContext = {\n            channelID: getElementValueOrNull(\"channelID\"),\n            leaderboardSpanAPIUrl: getElementValueOrNull(\"leaderboardSpanAPIUrl\"),\n            formSubmitUrl: getElementValueOrNull(\"formSubmitUrl\"),\n            csrfToken: getElementValueOrNull(\"csrfToken\"),\n            action: getElementValueOrNull(\"action\"),\n            error: getElementValueOrNull(\"error\")\n        };\n        rootComponents.push(<ChannelLeaderboardSpanForm key=\"1\" channelLeaderboardSpanContext={channelLeaderboardSpanContext} />);\n    } else if (rootType == \"show_suggestion_pool\") {\n        var showSuggestionPoolContext = {\n            showID: getElementValueOrNull(\"showID\"),\n            suggestionPoolID: getElementValueOrNull(\"suggestionPoolID\"),\n            suggestionPoolDisplayName: getElementValueOrNull(\"suggestionPoolDisplayName\"),\n            suggestionPoolDescription: getElementValueOrNull(\"suggestionPoolDescription\"),\n            suggestingDisabled: getElementValueOrNull(\"suggestingDisabled\"),\n            isChannelAdmin: getElementValueOrNull(\"isChannelAdmin\"),\n            suggestionListAPIUrl: getElementValueOrNull(\"suggestionListAPIUrl\"),\n            suggestionPoolListAPIUrl: getElementValueOrNull(\"suggestionPoolListAPIUrl\"),\n            channelHomeUrl: getElementValueOrNull(\"channelHomeUrl\"),\n            userID: getElementValueOrNull(\"userID\"),\n            sessionID: getElementValueOrNull(\"sessionID\"),\n            formSubmitUrl: getElementValueOrNull(\"formSubmitUrl\"),\n            upvoteSubmitUrl: getElementValueOrNull(\"upvoteSubmitUrl\"),\n            csrfToken: getElementValueOrNull(\"csrfToken\"),\n            action: getElementValueOrNull(\"action\"),\n            error: getElementValueOrNull(\"error\"),\n            suggestalot: getElementValueOrNull(\"suggestalot\")\n        };\n        rootComponents.push(<ShowSuggestionPool key=\"1\" showSuggestionPoolContext={showSuggestionPoolContext} />);\n    } else if (rootType == \"show_controller\") {\n        var showControllerContext = {\n            showID: getElementValueOrNull(\"showID\"),\n            showAPIUrl: getElementValueOrNull(\"showAPIUrl\"),\n            voteTypeAPIUrl: getElementValueOrNull(\"voteTypeAPIUrl\"),\n            formSubmitUrl: getElementValueOrNull(\"formSubmitUrl\"),\n            csrfToken: getElementValueOrNull(\"csrfToken\"),\n            action: getElementValueOrNull(\"action\"),\n            error: getElementValueOrNull(\"error\")\n        };\n        rootComponents.push(<ShowController key=\"1\" showControllerContext={showControllerContext} />);\n    } else if (rootType == \"show_display\") {\n        var showDisplayContext = {\n            showID: getElementValueOrNull(\"showID\"),\n            teamPhotoUrl: getElementValueOrNull(\"teamPhotoUrl\"),\n            playerAPIUrl: getElementValueOrNull(\"playerAPIUrl\"),\n            suggestionAPIUrl: getElementValueOrNull(\"suggestionAPIUrl\"),\n            showAPIUrl: getElementValueOrNull(\"showAPIUrl\"),\n            liveVoteAPIUrl: getElementValueOrNull(\"liveVoteAPIUrl\"),\n            showLeaderboardAPIUrl: getElementValueOrNull(\"showLeaderboardAPIUrl\"),\n            voteTypeAPIUrl: getElementValueOrNull(\"voteTypeAPIUrl\"),\n            voteOptionAPIUrl: getElementValueOrNull(\"voteOptionAPIUrl\"),\n            channelShowLeaderboardUrl: getElementValueOrNull(\"channelShowLeaderboardUrl\"),\n            audioPath: getElementValueOrNull(\"audioPath\")\n        };\n        rootComponents.push(<ShowDisplay key=\"1\" showDisplayContext={showDisplayContext} />);\n    }\n\n\n    return (\n      <div>{rootComponents}</div>\n    );\n  }\n});\n\nReactDOM.render(\n    <RootComponent />,\n    document.getElementById('container-fluid')\n);"]}